<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CitizenFX.Core</name>
    </assembly>
    <members>
        <member name="E:CitizenFX.Core.BaseScript.Tick">
            <summary>
            An event containing callbacks to attempt to schedule on every game tick.
            A callback will only be rescheduled once the associated task completes.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.BaseScript.Delay(System.Int32)">
            <summary>
            Returns a task that will delay scheduling of the current interval function by the passed amount of time.
            </summary>
            <example>
            await Delay(500);
            </example>
            <param name="msecs">The amount of time by which to delay scheduling this interval function.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="M:CitizenFX.Core.BaseScript.TriggerClientEvent(System.String,System.Object[])">
            <summary>
            Broadcasts an event to all connected players.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="args">Arguments to pass to the event.</param>
        </member>
        <member name="M:CitizenFX.Core.BaseScript.TriggerLatentClientEvent(System.String,System.Int32,System.Object[])">
            <summary>
            Broadcasts an event to all connected players.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="args">Arguments to pass to the event.</param>
        </member>
        <member name="T:CitizenFX.Core.FastStructure">
            <summary>
            Provides fast reading and writing of generic structures to a memory location using IL emitted functions.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.FastStructure.GetPtr``1(``0@)">
            <summary>
            Retrieve a pointer to the passed generic structure type. This is achieved by emitting a <see cref="T:System.Reflection.Emit.DynamicMethod"/> to retrieve a pointer to the structure.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="structure"></param>
            <returns>A pointer to the provided structure in memory.</returns>
            <see cref="F:CitizenFX.Core.FastStructure`1.GetPtr"/>
        </member>
        <member name="M:CitizenFX.Core.FastStructure.PtrToStructure``1(System.IntPtr)">
            <summary>
            Loads the generic value type <typeparamref name="T"/> from a pointer. This is achieved by emitting a <see cref="T:System.Reflection.Emit.DynamicMethod"/> that returns the value in the memory location as a <typeparamref name="T"/>.
            <para>The equivalent non-generic C# code:</para>
            <code>
            unsafe MyStruct ReadFromPointer(byte* pointer)
            {
                return *(MyStruct*)pointer;
            }
            </code>
            </summary>
            <typeparam name="T">Any value/structure type</typeparam>
            <param name="pointer">Unsafe pointer to memory to load the value from</param>
            <returns>The newly loaded value</returns>
        </member>
        <member name="M:CitizenFX.Core.FastStructure.StructureToPtr``1(``0@,System.IntPtr)">
            <summary>
            Writes the generic value type <typeparamref name="T"/> to the location specified by a pointer. This is achieved by emitting a <see cref="T:System.Reflection.Emit.DynamicMethod"/> that copies the value from the referenced structure into the specified memory location.
            <para>There is no exact equivalent possible in C#, the closest possible (generates the same IL) is the following code:</para>
            <code>
            unsafe void WriteToPointer(ref SharedHeader dest, ref SharedHeader src)
            {
                dest = src;
            }
            </code>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pointer"></param>
            <param name="structure"></param>
        </member>
        <member name="M:CitizenFX.Core.FastStructure.SizeOf``1">
            <summary>
            Retrieve the cached size of a structure
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <remarks>Caches the size by type</remarks>
            <see cref="F:CitizenFX.Core.FastStructure`1.Size"/>
        </member>
        <member name="M:CitizenFX.Core.FastStructure.ReadArray``1(``0[],System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Reads a number of elements from a memory location into the provided buffer starting at the specified index.
            </summary>
            <typeparam name="T">The structure type</typeparam>
            <param name="buffer">The destination buffer.</param>
            <param name="source">The source memory location.</param>
            <param name="index">The start index within <paramref name="buffer"/>.</param>
            <param name="count">The number of elements to read.</param>
        </member>
        <member name="M:CitizenFX.Core.FastStructure.WriteArray``1(System.IntPtr,``0[],System.Int32,System.Int32)">
            <summary>
            Writes a number of elements to a memory location from the provided buffer starting at the specified index.
            </summary>
            <typeparam name="T">The structure type</typeparam>
            <param name="destination">The destination memory location.</param>
            <param name="buffer">The source buffer.</param>
            <param name="index">The start index within <paramref name="buffer"/>.</param>
            <param name="count">The number of elements to write.</param>
        </member>
        <member name="T:CitizenFX.Core.FastStructure`1">
            <summary>
            Emits optimized IL for the reading and writing of structures to/from memory.
            <para>For a 32-byte structure with 1 million iterations:</para>
            <para>The <see cref="F:CitizenFX.Core.FastStructure`1.PtrToStructure"/> method performs approx. 20x faster than
            <see cref="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)"/> (8ms vs 160ms), and about 1.6x slower than the non-generic equivalent (8ms vs 5ms)</para>
            <para>The <see cref="F:CitizenFX.Core.FastStructure`1.StructureToPtr"/> method performs approx. 8x faster than 
            <see cref="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)"/> (4ms vs 34ms). </para>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CitizenFX.Core.FastStructure`1.GetPtrDelegate">
            <summary>
            Delegate that returns a pointer to the provided structure. Use with extreme caution.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CitizenFX.Core.FastStructure`1.PtrToStructureDelegate">
            <summary>
            Delegate for loading a structure from the specified memory address
            </summary>
            <param name="pointer"></param>
            <returns></returns>
        </member>
        <member name="T:CitizenFX.Core.FastStructure`1.StructureToPtrDelegate">
            <summary>
            Delegate for writing a structure to the specified memory address
            </summary>
            <param name="value"></param>
            <param name="pointer"></param>
        </member>
        <member name="F:CitizenFX.Core.FastStructure`1.GetPtr">
            <summary>
            The <see cref="T:CitizenFX.Core.FastStructure`1.GetPtrDelegate"/> delegate for the generated IL to retrieve a pointer to the structure
            </summary>
        </member>
        <member name="F:CitizenFX.Core.FastStructure`1.PtrToStructure">
            <summary>
            The <see cref="T:CitizenFX.Core.FastStructure`1.PtrToStructureDelegate"/> delegate for the generated IL to retrieve a structure from a specified memory address.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.FastStructure`1.StructureToPtr">
            <summary>
            The <see cref="T:CitizenFX.Core.FastStructure`1.StructureToPtrDelegate"/> delegate for the generated IL to store a structure at the specified memory address.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.FastStructure`1.Size">
            <summary>
            Cached size of T as determined by <see cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)"/>.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.FastStructure`1.#cctor">
            <summary>
            Performs once of type compatibility check.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the type T is incompatible</exception>
        </member>
        <member name="F:CitizenFX.Core.MathUtil.ZeroTolerance">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.MathUtil.Pi">
            <summary>
            A value specifying the approximation of π which is 180 degrees.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.MathUtil.TwoPi">
            <summary>
            A value specifying the approximation of 2π which is 360 degrees.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.MathUtil.PiOverTwo">
            <summary>
            A value specifying the approximation of π/2 which is 90 degrees.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.MathUtil.PiOverFour">
            <summary>
            A value specifying the approximation of π/4 which is 45 degrees.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.NearEqual(System.Single,System.Single)">
            <summary>
            Checks if a and b are almost equals, taking into account the magnitude of floating point numbers (unlike <see cref="M:CitizenFX.Core.MathUtil.WithinEpsilon(System.Single,System.Single,System.Single)"/> method). See Remarks.
            See remarks.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <returns><c>true</c> if a almost equal to b, <c>false</c> otherwise</returns>
            <remarks>
            The code is using the technique described by Bruce Dawson in 
            <a href="http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/">Comparing Floating point numbers 2012 edition</a>. 
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.IsZero(System.Single)">
            <summary>
            Determines whether the specified value is close to zero (0.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to zero (0.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.IsOne(System.Single)">
            <summary>
            Determines whether the specified value is close to one (1.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to one (1.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.WithinEpsilon(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a - b are almost equals within a float epsilon.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <param name="epsilon">Epsilon value</param>
            <returns><c>true</c> if a almost equal to b within a float epsilon, <c>false</c> otherwise</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.RevolutionsToDegrees(System.Single)">
            <summary>
            Converts revolutions to degrees.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.RevolutionsToRadians(System.Single)">
            <summary>
            Converts revolutions to radians.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.RevolutionsToGradians(System.Single)">
            <summary>
            Converts revolutions to gradians.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.DegreesToRevolutions(System.Single)">
            <summary>
            Converts degrees to revolutions.
            </summary>
            <param name="degree">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.DegreesToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degree">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.RadiansToRevolutions(System.Single)">
            <summary>
            Converts radians to revolutions.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.RadiansToGradians(System.Single)">
            <summary>
            Converts radians to gradians.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.GradiansToRevolutions(System.Single)">
            <summary>
            Converts gradians to revolutions.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.GradiansToDegrees(System.Single)">
            <summary>
            Converts gradians to degrees.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.GradiansToRadians(System.Single)">
            <summary>
            Converts gradians to radians.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.RadiansToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.Lerp(System.Byte,System.Byte,System.Single)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.SmoothStep(System.Single)">
            <summary>
            Performs smooth (cubic Hermite) interpolation between 0 and 1.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Smoothstep
            </remarks>
            <param name="amount">Value between 0 and 1 indicating interpolation amount.</param>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.SmootherStep(System.Single)">
            <summary>
            Performs a smooth(er) interpolation between 0 and 1 with 1st and 2nd order derivatives of zero at endpoints.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Smoothstep
            </remarks>
            <param name="amount">Value between 0 and 1 indicating interpolation amount.</param>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.Mod(System.Single,System.Single)">
            <summary>
            Calculates the modulo of the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="modulo">The modulo.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.Mod2PI(System.Single)">
            <summary>
            Calculates the modulo 2*PI of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.Wrap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps the specified value into a range [min, max]
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>Result of the wrapping.</returns>
            <exception cref="T:System.ArgumentException">Is thrown when <paramref name="min"/> is greater than <paramref name="max"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.Wrap(System.Single,System.Single,System.Single)">
            <summary>
            Wraps the specified value into a range [min, max[
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>Result of the wrapping.</returns>
            <exception cref="T:System.ArgumentException">Is thrown when <paramref name="min"/> is greater than <paramref name="max"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.Gauss(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gauss function.
            </summary>
            <param name="amplitude">Curve amplitude.</param>
            <param name="x">Position X.</param>
            <param name="y">Position Y</param>
            <param name="radX">Radius X.</param>
            <param name="radY">Radius Y.</param>
            <param name="sigmaX">Curve sigma X.</param>
            <param name="sigmaY">Curve sigma Y.</param>
            <returns>The result of Gaussian function.</returns>
        </member>
        <member name="M:CitizenFX.Core.MathUtil.Gauss(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gauss function.
            </summary>
            <param name="amplitude">Curve amplitude.</param>
            <param name="x">Position X.</param>
            <param name="y">Position Y</param>
            <param name="radX">Radius X.</param>
            <param name="radY">Radius Y.</param>
            <param name="sigmaX">Curve sigma X.</param>
            <param name="sigmaY">Curve sigma Y.</param>
            <returns>The result of Gaussian function.</returns>
        </member>
        <member name="T:CitizenFX.Core.Matrix">
            <summary>
            Represents a 4x4 mathematical matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.Zero">
            <summary>
            A <see cref="T:CitizenFX.Core.Matrix"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.Identity">
            <summary>
            The identity <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M11">
            <summary>
            Value at row 1 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M12">
            <summary>
            Value at row 1 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M13">
            <summary>
            Value at row 1 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M14">
            <summary>
            Value at row 1 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M21">
            <summary>
            Value at row 2 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M22">
            <summary>
            Value at row 2 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M23">
            <summary>
            Value at row 2 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M24">
            <summary>
            Value at row 2 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M31">
            <summary>
            Value at row 3 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M32">
            <summary>
            Value at row 3 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M33">
            <summary>
            Value at row 3 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M34">
            <summary>
            Value at row 3 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M41">
            <summary>
            Value at row 4 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M42">
            <summary>
            Value at row 4 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M43">
            <summary>
            Value at row 4 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix.M44">
            <summary>
            Value at row 4 column 4 of the matrix.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Up">
            <summary>
            Gets or sets the up <see cref="T:CitizenFX.Core.Vector3"/> of the matrix; that is M21, M22, and M23.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Down">
            <summary>
            Gets or sets the down <see cref="T:CitizenFX.Core.Vector3"/> of the matrix; that is -M21, -M22, and -M23.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Right">
            <summary>
            Gets or sets the right <see cref="T:CitizenFX.Core.Vector3"/> of the matrix; that is M11, M12, and M13.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Left">
            <summary>
            Gets or sets the left <see cref="T:CitizenFX.Core.Vector3"/> of the matrix; that is -M11, -M12, and -M13.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Forward">
            <summary>
            Gets or sets the forward <see cref="T:CitizenFX.Core.Vector3"/> of the matrix; that is -M31, -M32, and -M33.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Backward">
            <summary>
            Gets or sets the backward <see cref="T:CitizenFX.Core.Vector3"/> of the matrix; that is M31, M32, and M33.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Matrix.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Matrix"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Matrix"/> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the matrix.</param>
            <param name="M12">The value to assign at row 1 column 2 of the matrix.</param>
            <param name="M13">The value to assign at row 1 column 3 of the matrix.</param>
            <param name="M14">The value to assign at row 1 column 4 of the matrix.</param>
            <param name="M21">The value to assign at row 2 column 1 of the matrix.</param>
            <param name="M22">The value to assign at row 2 column 2 of the matrix.</param>
            <param name="M23">The value to assign at row 2 column 3 of the matrix.</param>
            <param name="M24">The value to assign at row 2 column 4 of the matrix.</param>
            <param name="M31">The value to assign at row 3 column 1 of the matrix.</param>
            <param name="M32">The value to assign at row 3 column 2 of the matrix.</param>
            <param name="M33">The value to assign at row 3 column 3 of the matrix.</param>
            <param name="M34">The value to assign at row 3 column 4 of the matrix.</param>
            <param name="M41">The value to assign at row 4 column 1 of the matrix.</param>
            <param name="M42">The value to assign at row 4 column 2 of the matrix.</param>
            <param name="M43">The value to assign at row 4 column 3 of the matrix.</param>
            <param name="M44">The value to assign at row 4 column 4 of the matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Matrix"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the matrix. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than sixteen elements.</exception>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Row1">
            <summary>
            Gets or sets the first row in the matrix; that is M11, M12, M13, and M14.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Row2">
            <summary>
            Gets or sets the second row in the matrix; that is M21, M22, M23, and M24.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Row3">
            <summary>
            Gets or sets the third row in the matrix; that is M31, M32, M33, and M34.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Row4">
            <summary>
            Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Column1">
            <summary>
            Gets or sets the first column in the matrix; that is M11, M21, M31, and M41.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Column2">
            <summary>
            Gets or sets the second column in the matrix; that is M12, M22, M32, and M42.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Column3">
            <summary>
            Gets or sets the third column in the matrix; that is M13, M23, M33, and M43.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Column4">
            <summary>
            Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.TranslationVector">
            <summary>
            Gets or sets the translation of the matrix; that is M41, M42, and M43.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.ScaleVector">
            <summary>
            Gets or sets the scale of the matrix; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity matrix.
            </summary>
            <value>
            <c>true</c> if this instance is an identity matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:CitizenFX.Core.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Invert">
            <summary>
            Inverts the matrix.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Orthogonalize">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Orthonormalize">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.DecomposeQR(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Decomposes a matrix into an orthonormalized matrix Q and a right triangular matrix R.
            </summary>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
            <param name="R">When the method completes, contains the right triangular matrix of the decomposition.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.DecomposeLQ(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Decomposes a matrix into a lower triangular matrix L and an orthonormalized matrix Q.
            </summary>
            <param name="L">When the method completes, contains the lower triangular matrix of the decomposition.</param>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Decompose(CitizenFX.Core.Vector3@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Vector3@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.DecomposeUniformScale(System.Single@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Vector3@)">
            <summary>
            Decomposes a uniform scale matrix into a scale, rotation, and translation.
            A uniform scale matrix has the same scale in every axis.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose only an SRT transformation matrix that has the same scale in every axis.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the matrix.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            Exchanges two columns in the matrix.
            </summary>
            <param name="firstColumn">The first column to exchange. This is an index of the column starting at zero.</param>
            <param name="secondColumn">The second column to exchange. This is an index of the column starting at zero.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.ToArray">
            <summary>
            Creates an array containing the elements of the matrix.
            </summary>
            <returns>A sixteen-element array containing the components of the matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Add(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Add(CitizenFX.Core.Matrix,CitizenFX.Core.Matrix)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Subtract(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Subtract(CitizenFX.Core.Matrix,CitizenFX.Core.Matrix)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Multiply(CitizenFX.Core.Matrix@,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Multiply(CitizenFX.Core.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Multiply(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Multiply(CitizenFX.Core.Matrix,CitizenFX.Core.Matrix)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Divide(CitizenFX.Core.Matrix@,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Divide(CitizenFX.Core.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Divide(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Divide(CitizenFX.Core.Matrix,CitizenFX.Core.Matrix)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Exponent(CitizenFX.Core.Matrix@,System.Int32,CitizenFX.Core.Matrix@)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <param name="result">When the method completes, contains the exponential matrix.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Exponent(CitizenFX.Core.Matrix,System.Int32)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <returns>The exponential matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Negate(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Negate(CitizenFX.Core.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Lerp(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matrices.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Lerp(CitizenFX.Core.Matrix,CitizenFX.Core.Matrix,System.Single)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.SmoothStep(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.SmoothStep(CitizenFX.Core.Matrix,CitizenFX.Core.Matrix,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Transpose(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.TransposeByRef(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Transpose(CitizenFX.Core.Matrix)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <returns>The transpose of the specified matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Invert(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Invert(CitizenFX.Core.Matrix)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <returns>The inverse of the specified matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Orthogonalize(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized matrix.</param>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Orthogonalize(CitizenFX.Core.Matrix)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <returns>The orthogonalized matrix.</returns>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Orthonormalize(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized matrix.</param>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Orthonormalize(CitizenFX.Core.Matrix)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <returns>The orthonormalized matrix.</returns>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.UpperTriangularForm(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Brings the matrix into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular matrix.</param>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.UpperTriangularForm(CitizenFX.Core.Matrix)">
            <summary>
            Brings the matrix into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <returns>The upper triangular matrix.</returns>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.LowerTriangularForm(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Brings the matrix into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular matrix.</param>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.LowerTriangularForm(CitizenFX.Core.Matrix)">
            <summary>
            Brings the matrix into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <returns>The lower triangular matrix.</returns>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RowEchelonForm(CitizenFX.Core.Matrix@,CitizenFX.Core.Matrix@)">
            <summary>
            Brings the matrix into row echelon form using elementary row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RowEchelonForm(CitizenFX.Core.Matrix)">
            <summary>
            Brings the matrix into row echelon form using elementary row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.ReducedRowEchelonForm(CitizenFX.Core.Matrix@,CitizenFX.Core.Vector4@,CitizenFX.Core.Matrix@,CitizenFX.Core.Vector4@)">
            <summary>
            Brings the matrix into reduced row echelon form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into reduced row echelon form.</param>
            <param name="augment">The fifth column of the matrix.</param>
            <param name="result">When the method completes, contains the resultant matrix after the operation.</param>
            <param name="augmentResult">When the method completes, contains the resultant fifth column of the matrix.</param>
            <remarks>
            <para>The fifth column is often called the augmented part of the matrix. This is because the fifth
            column is really just an extension of the matrix so that there is a place to put all of the
            non-zero components after the operation is complete.</para>
            <para>Often times the resultant matrix will the identity matrix or a matrix similar to the identity
            matrix. Sometimes, however, that is not possible and numbers other than zero and one may appear.</para>
            <para>This method can be used to solve systems of linear equations. Upon completion of this method,
            the <paramref name="augmentResult"/> will contain the solution for the system. It is up to the user
            to analyze both the input and the result to determine if a solution really exists.</para>
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix.BillboardLH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.BillboardLH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.BillboardRH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.BillboardRH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.LookAtLH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.LookAtLH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.LookAtRH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a right-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.LookAtRH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a right-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a right-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a right-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a right-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a right-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Scaling(CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Scaling(CitizenFX.Core.Vector3)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Scaling(System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Scaling(System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a matrix that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Scaling(System.Single)">
            <summary>
            Creates a matrix that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RotationX(System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RotationX(System.Single)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RotationY(System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RotationY(System.Single)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RotationZ(System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RotationZ(System.Single)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RotationAxis(CitizenFX.Core.Vector3@,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RotationAxis(CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Creates a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RotationQuaternion(CitizenFX.Core.Quaternion@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <param name="result">The created rotation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RotationQuaternion(CitizenFX.Core.Quaternion)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Translation(CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Translation(CitizenFX.Core.Vector3)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Translation(System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Skew(System.Single,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a skew/shear matrix by means of a translation vector, a rotation vector, and a rotation angle.
            shearing is performed in the direction of translation vector, where translation vector and rotation vector define the shearing plane.
            The effect is such that the skewed rotation vector has the specified angle with rotation itself.
            </summary>
            <param name="angle">The rotation angle.</param>
            <param name="rotationVec">The rotation vector</param>
            <param name="transVec">The translation vector</param>
            <param name="matrix">Contains the created skew/shear matrix. </param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.AffineTransformation(System.Single,CitizenFX.Core.Quaternion@,CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.AffineTransformation(System.Single,CitizenFX.Core.Quaternion,CitizenFX.Core.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.AffineTransformation(System.Single,CitizenFX.Core.Vector3@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.AffineTransformation(System.Single,CitizenFX.Core.Vector3,CitizenFX.Core.Quaternion,CitizenFX.Core.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.AffineTransformation2D(System.Single,System.Single,CitizenFX.Core.Vector2@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.AffineTransformation2D(System.Single,System.Single,CitizenFX.Core.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.AffineTransformation2D(System.Single,CitizenFX.Core.Vector2@,System.Single,CitizenFX.Core.Vector2@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.AffineTransformation2D(System.Single,CitizenFX.Core.Vector2,System.Single,CitizenFX.Core.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Transformation(CitizenFX.Core.Vector3@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Transformation(CitizenFX.Core.Vector3,CitizenFX.Core.Quaternion,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Quaternion,CitizenFX.Core.Vector3)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Transformation2D(CitizenFX.Core.Vector2@,System.Single,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,System.Single,CitizenFX.Core.Vector2@,CitizenFX.Core.Matrix@)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Transformation2D(CitizenFX.Core.Vector2,System.Single,CitizenFX.Core.Vector2,CitizenFX.Core.Vector2,System.Single,CitizenFX.Core.Vector2)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.op_Addition(CitizenFX.Core.Matrix,CitizenFX.Core.Matrix)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.op_UnaryPlus(CitizenFX.Core.Matrix)">
            <summary>
            Assert a matrix (return it unchanged).
            </summary>
            <param name="value">The matrix to assert (unchanged).</param>
            <returns>The asserted (unchanged) matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.op_Subtraction(CitizenFX.Core.Matrix,CitizenFX.Core.Matrix)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.op_UnaryNegation(CitizenFX.Core.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.op_Multiply(System.Single,CitizenFX.Core.Matrix)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="right">The matrix to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.op_Multiply(CitizenFX.Core.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.op_Multiply(CitizenFX.Core.Matrix,CitizenFX.Core.Matrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.op_Division(CitizenFX.Core.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.op_Division(CitizenFX.Core.Matrix,CitizenFX.Core.Matrix)">
            <summary>
            Divides two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.op_Equality(CitizenFX.Core.Matrix,CitizenFX.Core.Matrix)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.op_Inequality(CitizenFX.Core.Matrix,CitizenFX.Core.Matrix)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Equals(CitizenFX.Core.Matrix@)">
            <summary>
            Determines whether the specified <see cref="T:CitizenFX.Core.Matrix"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CitizenFX.Core.Matrix"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CitizenFX.Core.Matrix"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Equals(CitizenFX.Core.Matrix)">
            <summary>
            Determines whether the specified <see cref="T:CitizenFX.Core.Matrix"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CitizenFX.Core.Matrix"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CitizenFX.Core.Matrix"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CitizenFX.Core.Matrix3x3">
            <summary>
            Represents a 3x3 Matrix ( contains only Scale and Rotation ).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix3x3.Zero">
            <summary>
            A <see cref="T:CitizenFX.Core.Matrix3x3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix3x3.Identity">
            <summary>
            The identity <see cref="T:CitizenFX.Core.Matrix3x3"/>.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix3x3.M11">
            <summary>
            Value at row 1 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix3x3.M12">
            <summary>
            Value at row 1 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix3x3.M13">
            <summary>
            Value at row 1 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix3x3.M21">
            <summary>
            Value at row 2 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix3x3.M22">
            <summary>
            Value at row 2 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix3x3.M23">
            <summary>
            Value at row 2 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix3x3.M31">
            <summary>
            Value at row 3 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix3x3.M32">
            <summary>
            Value at row 3 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Matrix3x3.M33">
            <summary>
            Value at row 3 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Matrix3x3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Matrix3x3"/> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the Matrix3x3.</param>
            <param name="M12">The value to assign at row 1 column 2 of the Matrix3x3.</param>
            <param name="M13">The value to assign at row 1 column 3 of the Matrix3x3.</param>
            <param name="M21">The value to assign at row 2 column 1 of the Matrix3x3.</param>
            <param name="M22">The value to assign at row 2 column 2 of the Matrix3x3.</param>
            <param name="M23">The value to assign at row 2 column 3 of the Matrix3x3.</param>
            <param name="M31">The value to assign at row 3 column 1 of the Matrix3x3.</param>
            <param name="M32">The value to assign at row 3 column 2 of the Matrix3x3.</param>
            <param name="M33">The value to assign at row 3 column 3 of the Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Matrix3x3"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the Matrix3x3. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than sixteen elements.</exception>
        </member>
        <member name="P:CitizenFX.Core.Matrix3x3.Row1">
            <summary>
            Gets or sets the first row in the Matrix3x3; that is M11, M12, M13
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix3x3.Row2">
            <summary>
            Gets or sets the second row in the Matrix3x3; that is M21, M22, M23
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix3x3.Row3">
            <summary>
            Gets or sets the third row in the Matrix3x3; that is M31, M32, M33
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix3x3.Column1">
            <summary>
            Gets or sets the first column in the Matrix3x3; that is M11, M21, M31
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix3x3.Column2">
            <summary>
            Gets or sets the second column in the Matrix3x3; that is M12, M22, M32
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix3x3.Column3">
            <summary>
            Gets or sets the third column in the Matrix3x3; that is M13, M23, M33
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix3x3.ScaleVector">
            <summary>
            Gets or sets the scale of the Matrix3x3; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Matrix3x3.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity Matrix3x3.
            </summary>
            <value>
            <c>true</c> if this instance is an identity Matrix3x3; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CitizenFX.Core.Matrix3x3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix3x3 component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:CitizenFX.Core.Matrix3x3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix3x3 component, depending on the index.</value>
            <param name="row">The row of the Matrix3x3 to access.</param>
            <param name="column">The column of the Matrix3x3 to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Determinant">
            <summary>
            Calculates the determinant of the Matrix3x3.
            </summary>
            <returns>The determinant of the Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Invert">
            <summary>
            Inverts the Matrix3x3.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Transpose">
            <summary>
            Transposes the Matrix3x3.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Orthogonalize">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Orthonormalize">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.DecomposeQR(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Decomposes a Matrix3x3 into an orthonormalized Matrix3x3 Q and a right triangular Matrix3x3 R.
            </summary>
            <param name="Q">When the method completes, contains the orthonormalized Matrix3x3 of the decomposition.</param>
            <param name="R">When the method completes, contains the right triangular Matrix3x3 of the decomposition.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.DecomposeLQ(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Decomposes a Matrix3x3 into a lower triangular Matrix3x3 L and an orthonormalized Matrix3x3 Q.
            </summary>
            <param name="L">When the method completes, contains the lower triangular Matrix3x3 of the decomposition.</param>
            <param name="Q">When the method completes, contains the orthonormalized Matrix3x3 of the decomposition.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Decompose(CitizenFX.Core.Vector3@,CitizenFX.Core.Quaternion@)">
            <summary>
            Decomposes a Matrix3x3 into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed Matrix3x3.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed Matrix3x3.</param>
            <remarks>
            This method is designed to decompose an SRT transformation Matrix3x3 only.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.DecomposeUniformScale(System.Single@,CitizenFX.Core.Quaternion@)">
            <summary>
            Decomposes a uniform scale matrix into a scale, rotation, and translation.
            A uniform scale matrix has the same scale in every axis.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose only an SRT transformation matrix that has the same scale in every axis.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the Matrix3x3.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            Exchanges two columns in the Matrix3x3.
            </summary>
            <param name="firstColumn">The first column to exchange. This is an index of the column starting at zero.</param>
            <param name="secondColumn">The second column to exchange. This is an index of the column starting at zero.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.ToArray">
            <summary>
            Creates an array containing the elements of the Matrix3x3.
            </summary>
            <returns>A 9-element array containing the components of the Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Add(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Add(CitizenFX.Core.Matrix3x3,CitizenFX.Core.Matrix3x3)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Subtract(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Subtract(CitizenFX.Core.Matrix3x3,CitizenFX.Core.Matrix3x3)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Multiply(CitizenFX.Core.Matrix3x3@,System.Single,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Multiply(CitizenFX.Core.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Multiply(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Multiply(CitizenFX.Core.Matrix3x3,CitizenFX.Core.Matrix3x3)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Divide(CitizenFX.Core.Matrix3x3@,System.Single,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Divide(CitizenFX.Core.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Divide(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Divide(CitizenFX.Core.Matrix3x3,CitizenFX.Core.Matrix3x3)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Exponent(CitizenFX.Core.Matrix3x3@,System.Int32,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Performs the exponential operation on a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to perform the operation on.</param>
            <param name="exponent">The exponent to raise the Matrix3x3 to.</param>
            <param name="result">When the method completes, contains the exponential Matrix3x3.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Exponent(CitizenFX.Core.Matrix3x3,System.Int32)">
            <summary>
            Performs the exponential operation on a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to perform the operation on.</param>
            <param name="exponent">The exponent to raise the Matrix3x3 to.</param>
            <returns>The exponential Matrix3x3.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Negate(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to be negated.</param>
            <param name="result">When the method completes, contains the negated Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Negate(CitizenFX.Core.Matrix3x3)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to be negated.</param>
            <returns>The negated Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Lerp(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@,System.Single,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matrices.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Lerp(CitizenFX.Core.Matrix3x3,CitizenFX.Core.Matrix3x3,System.Single)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.SmoothStep(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@,System.Single,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.SmoothStep(CitizenFX.Core.Matrix3x3,CitizenFX.Core.Matrix3x3,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Transpose(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.TransposeByRef(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Transpose(CitizenFX.Core.Matrix3x3)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <returns>The transpose of the specified Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Invert(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Calculates the inverse of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Invert(CitizenFX.Core.Matrix3x3)">
            <summary>
            Calculates the inverse of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose inverse is to be calculated.</param>
            <returns>The inverse of the specified Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Orthogonalize(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized Matrix3x3.</param>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Orthogonalize(CitizenFX.Core.Matrix3x3)">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthogonalize.</param>
            <returns>The orthogonalized Matrix3x3.</returns>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Orthonormalize(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized Matrix3x3.</param>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Orthonormalize(CitizenFX.Core.Matrix3x3)">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthonormalize.</param>
            <returns>The orthonormalized Matrix3x3.</returns>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.UpperTriangularForm(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular Matrix3x3.</param>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.UpperTriangularForm(CitizenFX.Core.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into upper triangular form.</param>
            <returns>The upper triangular Matrix3x3.</returns>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.LowerTriangularForm(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular Matrix3x3.</param>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.LowerTriangularForm(CitizenFX.Core.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into lower triangular form.</param>
            <returns>The lower triangular Matrix3x3.</returns>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RowEchelonForm(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into row echelon form using elementary row operations;
            </summary>
            <param name="value">The Matrix3x3 to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RowEchelonForm(CitizenFX.Core.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into row echelon form using elementary row operations;
            </summary>
            <param name="value">The Matrix3x3 to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.BillboardLH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.BillboardLH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.BillboardRH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.BillboardRH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.LookAtLH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Creates a left-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.LookAtLH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a left-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.LookAtRH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Creates a right-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.LookAtRH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a right-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Scaling(CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Scaling(CitizenFX.Core.Vector3)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Scaling(System.Single,System.Single,System.Single,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Scaling(System.Single,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Scaling(System.Single)">
            <summary>
            Creates a Matrix3x3 that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RotationX(System.Single,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RotationX(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RotationY(System.Single,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RotationY(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RotationZ(System.Single,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RotationZ(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RotationAxis(CitizenFX.Core.Vector3@,System.Single,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RotationAxis(CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RotationQuaternion(CitizenFX.Core.Quaternion@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Creates a rotation Matrix3x3 from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the Matrix3x3.</param>
            <param name="result">The created rotation Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RotationQuaternion(CitizenFX.Core.Quaternion)">
            <summary>
            Creates a rotation Matrix3x3 from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the Matrix3x3.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RotationYawPitchRoll(System.Single,System.Single,System.Single,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.op_Addition(CitizenFX.Core.Matrix3x3,CitizenFX.Core.Matrix3x3)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.op_UnaryPlus(CitizenFX.Core.Matrix3x3)">
            <summary>
            Assert a Matrix3x3 (return it unchanged).
            </summary>
            <param name="value">The Matrix3x3 to assert (unchanged).</param>
            <returns>The asserted (unchanged) Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.op_Subtraction(CitizenFX.Core.Matrix3x3,CitizenFX.Core.Matrix3x3)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.op_UnaryNegation(CitizenFX.Core.Matrix3x3)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to negate.</param>
            <returns>The negated Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.op_Multiply(System.Single,CitizenFX.Core.Matrix3x3)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="right">The Matrix3x3 to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.op_Multiply(CitizenFX.Core.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.op_Multiply(CitizenFX.Core.Matrix3x3,CitizenFX.Core.Matrix3x3)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.op_Division(CitizenFX.Core.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.op_Division(CitizenFX.Core.Matrix3x3,CitizenFX.Core.Matrix3x3)">
            <summary>
            Divides two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.op_Equality(CitizenFX.Core.Matrix3x3,CitizenFX.Core.Matrix3x3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.op_Inequality(CitizenFX.Core.Matrix3x3,CitizenFX.Core.Matrix3x3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.op_Explicit(CitizenFX.Core.Matrix3x3)~CitizenFX.Core.Matrix">
            <summary>
            Convert the 3x3 Matrix to a 4x4 Matrix.
            </summary>
            <returns>A 4x4 Matrix with zero translation and M44=1</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.op_Explicit(CitizenFX.Core.Matrix)~CitizenFX.Core.Matrix3x3">
            <summary>
            Convert the 4x4 Matrix to a 3x3 Matrix.
            </summary>
            <returns>A 3x3 Matrix</returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Equals(CitizenFX.Core.Matrix3x3@)">
            <summary>
            Determines whether the specified <see cref="T:CitizenFX.Core.Matrix3x3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CitizenFX.Core.Matrix3x3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CitizenFX.Core.Matrix3x3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Equals(CitizenFX.Core.Matrix3x3)">
            <summary>
            Determines whether the specified <see cref="T:CitizenFX.Core.Matrix3x3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CitizenFX.Core.Matrix3x3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CitizenFX.Core.Matrix3x3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Equals(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Matrix3x3@)">
            <summary>
            Determines whether the specified <see cref="T:CitizenFX.Core.Matrix3x3"/> are equal.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Matrix3x3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CitizenFX.Core.Quaternion">
            <summary>
            Represents a four dimensional mathematical quaternion.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Quaternion.Zero">
            <summary>
            A <see cref="T:CitizenFX.Core.Quaternion"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Quaternion.One">
            <summary>
            A <see cref="T:CitizenFX.Core.Quaternion"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Quaternion.Identity">
            <summary>
            The identity <see cref="T:CitizenFX.Core.Quaternion"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Quaternion.X">
            <summary>
            The X component of the quaternion.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Quaternion.Y">
            <summary>
            The Y component of the quaternion.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Quaternion.Z">
            <summary>
            The Z component of the quaternion.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Quaternion.W">
            <summary>
            The W component of the quaternion.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Quaternion"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.#ctor(CitizenFX.Core.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Quaternion"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the components.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.#ctor(CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Quaternion"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.#ctor(CitizenFX.Core.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Quaternion"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Quaternion"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the quaternion.</param>
            <param name="y">Initial value for the Y component of the quaternion.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Quaternion"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the quaternion. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="P:CitizenFX.Core.Quaternion.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is equivalent to the identity quaternion.
            </summary>
            <value>
            <c>true</c> if this instance is an identity quaternion; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CitizenFX.Core.Quaternion.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Quaternion.Angle">
            <summary>
            Gets the angle of the quaternion.
            </summary>
            <value>The quaternion's angle.</value>
        </member>
        <member name="P:CitizenFX.Core.Quaternion.Axis">
            <summary>
            Gets the axis components of the quaternion.
            </summary>
            <value>The axis components of the quaternion.</value>
        </member>
        <member name="P:CitizenFX.Core.Quaternion.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Conjugate">
            <summary>
            Conjugates the quaternion.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Invert">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Length">
            <summary>
            Calculates the length of the quaternion.
            </summary>
            <returns>The length of the quaternion.</returns>
            <remarks>
            <see cref="M:CitizenFX.Core.Quaternion.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.LengthSquared">
            <summary>
            Calculates the squared length of the quaternion.
            </summary>
            <returns>The squared length of the quaternion.</returns>
            <remarks>
            This method may be preferred to <see cref="M:CitizenFX.Core.Quaternion.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Normalize">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.ToArray">
            <summary>
            Creates an array containing the elements of the quaternion.
            </summary>
            <returns>A four-element array containing the components of the quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Add(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <param name="result">When the method completes, contains the sum of the two quaternions.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Add(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Subtract(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two quaternions.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Subtract(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Multiply(CitizenFX.Core.Quaternion@,System.Single,CitizenFX.Core.Quaternion@)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <param name="result">When the method completes, contains the scaled quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Multiply(CitizenFX.Core.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Multiply(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <param name="result">When the method completes, contains the multiplied quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Multiply(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Negate(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <param name="result">When the method completes, contains a quaternion facing in the opposite direction.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Negate(CitizenFX.Core.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Barycentric(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@,System.Single,System.Single,CitizenFX.Core.Quaternion@)">
            <summary>
            Returns a <see cref="T:CitizenFX.Core.Quaternion"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:CitizenFX.Core.Quaternion"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CitizenFX.Core.Quaternion"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CitizenFX.Core.Quaternion"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains a new <see cref="T:CitizenFX.Core.Quaternion"/> containing the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Barycentric(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:CitizenFX.Core.Quaternion"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:CitizenFX.Core.Quaternion"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CitizenFX.Core.Quaternion"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CitizenFX.Core.Quaternion"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:CitizenFX.Core.Quaternion"/> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Conjugate(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <param name="result">When the method completes, contains the conjugated quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Conjugate(CitizenFX.Core.Quaternion)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <returns>The conjugated quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Dot(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@,System.Single@)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <param name="result">When the method completes, contains the dot product of the two quaternions.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Dot(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Exponential(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <param name="result">When the method completes, contains the exponentiated quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Exponential(CitizenFX.Core.Quaternion)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <returns>The exponentiated quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Invert(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <param name="result">When the method completes, contains the conjugated and renormalized quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Invert(CitizenFX.Core.Quaternion)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <returns>The conjugated and renormalized quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Lerp(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@,System.Single,CitizenFX.Core.Quaternion@)">
            <summary>
            Performs a linear interpolation between two quaternions.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two quaternions.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Lerp(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion,System.Single)">
            <summary>
            Performs a linear interpolation between two quaternion.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Logarithm(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <param name="result">When the method completes, contains the natural logarithm of the quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Logarithm(CitizenFX.Core.Quaternion)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <returns>The natural logarithm of the quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Normalize(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <param name="result">When the method completes, contains the normalized quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Normalize(CitizenFX.Core.Quaternion)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.RotationAxis(CitizenFX.Core.Vector3@,System.Single,CitizenFX.Core.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.RotationAxis(CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.RotationMatrix(CitizenFX.Core.Matrix@,CitizenFX.Core.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.RotationMatrix(CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.LookAtLH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Quaternion@)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.LookAtLH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.RotationLookAtLH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Quaternion@)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.RotationLookAtLH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.LookAtRH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Quaternion@)">
            <summary>
            Creates a right-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.LookAtRH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a right-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.RotationLookAtRH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Quaternion@)">
            <summary>
            Creates a right-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.RotationLookAtRH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a right-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.BillboardLH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Quaternion@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.BillboardLH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.BillboardRH(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Quaternion@)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.BillboardRH(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.RotationMatrix(CitizenFX.Core.Matrix)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single,CitizenFX.Core.Quaternion@)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            </summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            </summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Slerp(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@,System.Single,CitizenFX.Core.Quaternion@)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the spherical linear interpolation of the two quaternions.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Slerp(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Squad(CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Quaternion@,System.Single,CitizenFX.Core.Quaternion@)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <param name="result">When the method completes, contains the spherical quadrangle interpolation of the quaternions.</param>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Squad(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion,System.Single)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <returns>The spherical quadrangle interpolation of the quaternions.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.SquadSetup(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion)">
            <summary>
            Sets up control points for spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <returns>An array of three quaternions that represent control points for spherical quadrangle interpolation.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.op_Addition(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.op_Subtraction(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.op_UnaryNegation(CitizenFX.Core.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.op_Multiply(System.Single,CitizenFX.Core.Quaternion)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.op_Multiply(CitizenFX.Core.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.op_Multiply(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.op_Equality(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.op_Inequality(CitizenFX.Core.Quaternion,CitizenFX.Core.Quaternion)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Equals(CitizenFX.Core.Quaternion@)">
            <summary>
            Determines whether the specified <see cref="T:CitizenFX.Core.Quaternion"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CitizenFX.Core.Quaternion"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CitizenFX.Core.Quaternion"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Equals(CitizenFX.Core.Quaternion)">
            <summary>
            Determines whether the specified <see cref="T:CitizenFX.Core.Quaternion"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CitizenFX.Core.Quaternion"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CitizenFX.Core.Quaternion"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CitizenFX.Core.Vector2">
            <summary>
            Represents a two dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector2.Zero">
            <summary>
            A <see cref="T:CitizenFX.Core.Vector2"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector2.UnitX">
            <summary>
            The X unit <see cref="T:CitizenFX.Core.Vector2"/> (1, 0).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector2.UnitY">
            <summary>
            The Y unit <see cref="T:CitizenFX.Core.Vector2"/> (0, 1).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector2.One">
            <summary>
            A <see cref="T:CitizenFX.Core.Vector2"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Vector2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Vector2"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Vector2"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Vector2"/> struct.
            </summary>
            <param name="values">The values to assign to the X and Y components of the vector. This must be an array with two elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than two elements.</exception>
        </member>
        <member name="P:CitizenFX.Core.Vector2.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Vector2.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:CitizenFX.Core.Vector2.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="M:CitizenFX.Core.Vector2.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Vector2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Add(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Add(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Add(CitizenFX.Core.Vector2@,System.Single@,CitizenFX.Core.Vector2@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Add(CitizenFX.Core.Vector2,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Subtract(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Subtract(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Subtract(CitizenFX.Core.Vector2@,System.Single@,CitizenFX.Core.Vector2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtraced from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Subtract(CitizenFX.Core.Vector2,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtraced from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Subtract(System.Single@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtraced from elements</param>
            <param name="right">The input vector</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Subtract(System.Single,CitizenFX.Core.Vector2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtraced from elements</param>
            <param name="right">The input vector</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Multiply(CitizenFX.Core.Vector2@,System.Single,CitizenFX.Core.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Multiply(CitizenFX.Core.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Multiply(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Multiply(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Divide(CitizenFX.Core.Vector2@,System.Single,CitizenFX.Core.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Divide(CitizenFX.Core.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Divide(System.Single,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Divide(System.Single,CitizenFX.Core.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Negate(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Negate(CitizenFX.Core.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Barycentric(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,System.Single,System.Single,CitizenFX.Core.Vector2@)">
            <summary>
            Returns a <see cref="T:CitizenFX.Core.Vector2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:CitizenFX.Core.Vector2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CitizenFX.Core.Vector2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CitizenFX.Core.Vector2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 2D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Barycentric(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2,CitizenFX.Core.Vector2,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:CitizenFX.Core.Vector2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:CitizenFX.Core.Vector2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CitizenFX.Core.Vector2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CitizenFX.Core.Vector2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:CitizenFX.Core.Vector2"/> containing the 2D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Clamp(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Clamp(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Saturate">
            <summary>
            Saturates this instance in the range [0,1]
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Distance(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:CitizenFX.Core.Vector2.DistanceSquared(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Distance(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:CitizenFX.Core.Vector2.DistanceSquared(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.DistanceSquared(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.DistanceSquared(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Dot(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Dot(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Normalize(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Normalize(CitizenFX.Core.Vector2)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Lerp(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,System.Single,CitizenFX.Core.Vector2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Lerp(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.SmoothStep(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,System.Single,CitizenFX.Core.Vector2@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.SmoothStep(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Hermite(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,System.Single,CitizenFX.Core.Vector2@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Hermite(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2,CitizenFX.Core.Vector2,CitizenFX.Core.Vector2,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.CatmullRom(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,System.Single,CitizenFX.Core.Vector2@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.CatmullRom(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2,CitizenFX.Core.Vector2,CitizenFX.Core.Vector2,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Max(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Max(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Min(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Min(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Reflect(CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@,CitizenFX.Core.Vector2@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Reflect(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Orthogonalize(CitizenFX.Core.Vector2[],CitizenFX.Core.Vector2[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Orthonormalize(CitizenFX.Core.Vector2[],CitizenFX.Core.Vector2[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Transform(CitizenFX.Core.Vector2@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Vector2@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:CitizenFX.Core.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CitizenFX.Core.Quaternion"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:CitizenFX.Core.Vector4"/>.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Transform(CitizenFX.Core.Vector2,CitizenFX.Core.Quaternion)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:CitizenFX.Core.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CitizenFX.Core.Quaternion"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:CitizenFX.Core.Vector4"/>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Transform(CitizenFX.Core.Vector2[],CitizenFX.Core.Quaternion@,CitizenFX.Core.Vector2[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:CitizenFX.Core.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:CitizenFX.Core.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Transform(CitizenFX.Core.Vector2@,CitizenFX.Core.Matrix@,CitizenFX.Core.Vector4@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:CitizenFX.Core.Vector4"/>.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Transform(CitizenFX.Core.Vector2,CitizenFX.Core.Matrix)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <returns>The transformed <see cref="T:CitizenFX.Core.Vector4"/>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Transform(CitizenFX.Core.Vector2[],CitizenFX.Core.Matrix@,CitizenFX.Core.Vector4[])">
            <summary>
            Transforms an array of 2D vectors by the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector2.TransformCoordinate(CitizenFX.Core.Vector2@,CitizenFX.Core.Matrix@,CitizenFX.Core.Vector2@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.TransformCoordinate(CitizenFX.Core.Vector2,CitizenFX.Core.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.TransformCoordinate(CitizenFX.Core.Vector2[],CitizenFX.Core.Matrix@,CitizenFX.Core.Vector2[])">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="source">The array of coordinate vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.TransformNormal(CitizenFX.Core.Vector2@,CitizenFX.Core.Matrix@,CitizenFX.Core.Vector2@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.TransformNormal(CitizenFX.Core.Vector2,CitizenFX.Core.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.TransformNormal(CitizenFX.Core.Vector2[],CitizenFX.Core.Matrix@,CitizenFX.Core.Vector2[])">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Addition(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Multiply(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to <see cref="!:Multiply(ref SharpDX.Vector2,ref SharpDX.Vector2,out SharpDX.Vector2)"/>.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_UnaryPlus(CitizenFX.Core.Vector2)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Subtraction(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_UnaryNegation(CitizenFX.Core.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Multiply(System.Single,CitizenFX.Core.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Multiply(CitizenFX.Core.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Division(CitizenFX.Core.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Division(System.Single,CitizenFX.Core.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>  
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Division(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Addition(CitizenFX.Core.Vector2,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Addition(System.Single,CitizenFX.Core.Vector2)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Subtraction(CitizenFX.Core.Vector2,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtraced from elements</param>
            <returns>The vector with subtraced scalar from each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Subtraction(System.Single,CitizenFX.Core.Vector2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtraced from elements</param>
            <returns>The vector with subtraced scalar from each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Equality(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Inequality(CitizenFX.Core.Vector2,CitizenFX.Core.Vector2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Explicit(CitizenFX.Core.Vector2)~CitizenFX.Core.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:CitizenFX.Core.Vector2"/> to <see cref="T:CitizenFX.Core.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.op_Explicit(CitizenFX.Core.Vector2)~CitizenFX.Core.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:CitizenFX.Core.Vector2"/> to <see cref="T:CitizenFX.Core.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Equals(CitizenFX.Core.Vector2@)">
            <summary>
            Determines whether the specified <see cref="T:CitizenFX.Core.Vector2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CitizenFX.Core.Vector2"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:CitizenFX.Core.Vector2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Equals(CitizenFX.Core.Vector2)">
            <summary>
            Determines whether the specified <see cref="T:CitizenFX.Core.Vector2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CitizenFX.Core.Vector2"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:CitizenFX.Core.Vector2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CitizenFX.Core.Vector3">
            <summary>
            Represents a three dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.Zero">
            <summary>
            A <see cref="T:CitizenFX.Core.Vector3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.UnitX">
            <summary>
            The X unit <see cref="T:CitizenFX.Core.Vector3"/> (1, 0, 0).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.UnitY">
            <summary>
            The Y unit <see cref="T:CitizenFX.Core.Vector3"/> (0, 1, 0).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.UnitZ">
            <summary>
            The Z unit <see cref="T:CitizenFX.Core.Vector3"/> (0, 0, 1).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.One">
            <summary>
            A <see cref="T:CitizenFX.Core.Vector3"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.Up">
            <summary>
            A unit <see cref="T:CitizenFX.Core.Vector3"/> designating up (0, 1, 0).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.Down">
            <summary>
            A unit <see cref="T:CitizenFX.Core.Vector3"/> designating down (0, -1, 0).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.Left">
            <summary>
            A unit <see cref="T:CitizenFX.Core.Vector3"/> designating left (-1, 0, 0).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.Right">
            <summary>
            A unit <see cref="T:CitizenFX.Core.Vector3"/> designating right (1, 0, 0).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.ForwardRH">
            <summary>
            A unit <see cref="T:CitizenFX.Core.Vector3"/> designating forward in a right-handed coordinate system (0, 0, -1).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.ForwardLH">
            <summary>
            A unit <see cref="T:CitizenFX.Core.Vector3"/> designating forward in a left-handed coordinate system (0, 0, 1).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.BackwardRH">
            <summary>
            A unit <see cref="T:CitizenFX.Core.Vector3"/> designating backward in a right-handed coordinate system (0, 0, 1).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.BackwardLH">
            <summary>
            A unit <see cref="T:CitizenFX.Core.Vector3"/> designating backward in a left-handed coordinate system (0, 0, -1).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Vector3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Vector3"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.#ctor(CitizenFX.Core.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Vector3"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Vector3"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, and Z components of the vector. This must be an array with three elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than three elements.</exception>
        </member>
        <member name="P:CitizenFX.Core.Vector3.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Vector3.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:CitizenFX.Core.Vector3.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="M:CitizenFX.Core.Vector3.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Vector3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A three-element array containing the components of the vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Add(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Add(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Add(CitizenFX.Core.Vector3@,System.Single@,CitizenFX.Core.Vector3@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Add(CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Subtract(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Subtract(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Subtract(CitizenFX.Core.Vector3@,System.Single@,CitizenFX.Core.Vector3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtraced from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Subtract(CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtraced from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Subtract(System.Single@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtraced from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Subtract(System.Single,CitizenFX.Core.Vector3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtraced from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Multiply(CitizenFX.Core.Vector3@,System.Single,CitizenFX.Core.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Multiply(CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Multiply(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Multiply(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to Multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Divide(CitizenFX.Core.Vector3@,System.Single,CitizenFX.Core.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Divide(CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Divide(System.Single,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Divide(System.Single,CitizenFX.Core.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Negate(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Negate(CitizenFX.Core.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Barycentric(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,System.Single,System.Single,CitizenFX.Core.Vector3@)">
            <summary>
            Returns a <see cref="T:CitizenFX.Core.Vector3"/> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:CitizenFX.Core.Vector3"/> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CitizenFX.Core.Vector3"/> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CitizenFX.Core.Vector3"/> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 3D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Barycentric(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:CitizenFX.Core.Vector3"/> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:CitizenFX.Core.Vector3"/> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CitizenFX.Core.Vector3"/> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CitizenFX.Core.Vector3"/> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:CitizenFX.Core.Vector3"/> containing the 3D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Clamp(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Clamp(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Cross(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains he cross product of the two vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Cross(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Distance(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:CitizenFX.Core.Vector3.DistanceSquared(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Distance(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:CitizenFX.Core.Vector3.DistanceSquared(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.DistanceSquared(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.DistanceSquared(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.NearEqual(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Tests whether one 3D vector is near another 3D vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another 3D, <c>false</c> otherwise</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.NearEqual(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@)">
            <summary>
            Tests whether one 3D vector is near another 3D vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another 3D, <c>false</c> otherwise</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Dot(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Dot(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Normalize(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Normalize(CitizenFX.Core.Vector3)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Lerp(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,System.Single,CitizenFX.Core.Vector3@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Lerp(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.SmoothStep(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,System.Single,CitizenFX.Core.Vector3@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.SmoothStep(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Hermite(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,System.Single,CitizenFX.Core.Vector3@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Hermite(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.CatmullRom(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,System.Single,CitizenFX.Core.Vector3@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.CatmullRom(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Max(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Max(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Min(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Min(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Project(CitizenFX.Core.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@,CitizenFX.Core.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in screen space.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Project(CitizenFX.Core.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix)">
            <summary>
            Projects a 3D vector from object space into screen space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in screen space.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Unproject(CitizenFX.Core.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix@,CitizenFX.Core.Vector3@)">
            <summary>
            Projects a 3D vector from screen space into object space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in object space.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Unproject(CitizenFX.Core.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,CitizenFX.Core.Matrix)">
            <summary>
            Projects a 3D vector from screen space into object space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in object space.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Reflect(CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@,CitizenFX.Core.Vector3@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Reflect(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Orthogonalize(CitizenFX.Core.Vector3[],CitizenFX.Core.Vector3[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Orthonormalize(CitizenFX.Core.Vector3[],CitizenFX.Core.Vector3[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Transform(CitizenFX.Core.Vector3@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:CitizenFX.Core.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CitizenFX.Core.Quaternion"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:CitizenFX.Core.Vector4"/>.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Transform(CitizenFX.Core.Vector3,CitizenFX.Core.Quaternion)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:CitizenFX.Core.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CitizenFX.Core.Quaternion"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:CitizenFX.Core.Vector4"/>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Transform(CitizenFX.Core.Vector3[],CitizenFX.Core.Quaternion@,CitizenFX.Core.Vector3[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:CitizenFX.Core.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:CitizenFX.Core.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Transform(CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix3x3@,CitizenFX.Core.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:CitizenFX.Core.Matrix3x3"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix3x3"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:CitizenFX.Core.Vector3"/>.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Transform(CitizenFX.Core.Vector3,CitizenFX.Core.Matrix3x3)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:CitizenFX.Core.Matrix3x3"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix3x3"/>.</param>
            <returns>The transformed <see cref="T:CitizenFX.Core.Vector3"/>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Transform(CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@,CitizenFX.Core.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:CitizenFX.Core.Vector3"/>.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Transform(CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@,CitizenFX.Core.Vector4@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:CitizenFX.Core.Vector4"/>.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Transform(CitizenFX.Core.Vector3,CitizenFX.Core.Matrix)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <returns>The transformed <see cref="T:CitizenFX.Core.Vector4"/>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Transform(CitizenFX.Core.Vector3[],CitizenFX.Core.Matrix@,CitizenFX.Core.Vector4[])">
            <summary>
            Transforms an array of 3D vectors by the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector3.TransformCoordinate(CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@,CitizenFX.Core.Vector3@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.TransformCoordinate(CitizenFX.Core.Vector3,CitizenFX.Core.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.TransformCoordinate(CitizenFX.Core.Vector3[],CitizenFX.Core.Matrix@,CitizenFX.Core.Vector3[])">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="source">The array of coordinate vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.TransformNormal(CitizenFX.Core.Vector3@,CitizenFX.Core.Matrix@,CitizenFX.Core.Vector3@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.TransformNormal(CitizenFX.Core.Vector3,CitizenFX.Core.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.TransformNormal(CitizenFX.Core.Vector3[],CitizenFX.Core.Matrix@,CitizenFX.Core.Vector3[])">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Addition(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Multiply(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to <see cref="!:Multiply(ref SharpDX.Vector3,ref SharpDX.Vector3,out SharpDX.Vector3)"/>.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_UnaryPlus(CitizenFX.Core.Vector3)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Subtraction(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_UnaryNegation(CitizenFX.Core.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Multiply(System.Single,CitizenFX.Core.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Multiply(CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Division(CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Division(System.Single,CitizenFX.Core.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>  
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Division(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Addition(CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Addition(System.Single,CitizenFX.Core.Vector3)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Subtraction(CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtraced from elements</param>
            <returns>The vector with added scalar from each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Subtraction(System.Single,CitizenFX.Core.Vector3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtraced from elements</param>
            <returns>The vector with subtraced scalar from each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Equality(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Inequality(CitizenFX.Core.Vector3,CitizenFX.Core.Vector3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Explicit(CitizenFX.Core.Vector3)~CitizenFX.Core.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:CitizenFX.Core.Vector3"/> to <see cref="T:CitizenFX.Core.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.op_Explicit(CitizenFX.Core.Vector3)~CitizenFX.Core.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:CitizenFX.Core.Vector3"/> to <see cref="T:CitizenFX.Core.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Equals(CitizenFX.Core.Vector3@)">
            <summary>
            Determines whether the specified <see cref="T:CitizenFX.Core.Vector3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CitizenFX.Core.Vector3"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:CitizenFX.Core.Vector3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Equals(CitizenFX.Core.Vector3)">
            <summary>
            Determines whether the specified <see cref="T:CitizenFX.Core.Vector3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CitizenFX.Core.Vector3"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:CitizenFX.Core.Vector3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CitizenFX.Core.Vector4">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector4.Zero">
            <summary>
            A <see cref="T:CitizenFX.Core.Vector4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector4.UnitX">
            <summary>
            The X unit <see cref="T:CitizenFX.Core.Vector4"/> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector4.UnitY">
            <summary>
            The Y unit <see cref="T:CitizenFX.Core.Vector4"/> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector4.UnitZ">
            <summary>
            The Z unit <see cref="T:CitizenFX.Core.Vector4"/> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector4.UnitW">
            <summary>
            The W unit <see cref="T:CitizenFX.Core.Vector4"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector4.One">
            <summary>
            A <see cref="T:CitizenFX.Core.Vector4"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Vector4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Vector4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Vector4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Vector4"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.#ctor(CitizenFX.Core.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Vector4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.#ctor(CitizenFX.Core.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Vector4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CitizenFX.Core.Vector4"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="P:CitizenFX.Core.Vector4.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Vector4.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:CitizenFX.Core.Vector4.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector4.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="M:CitizenFX.Core.Vector4.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Vector4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Add(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Add(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Add(CitizenFX.Core.Vector4@,System.Single@,CitizenFX.Core.Vector4@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Add(CitizenFX.Core.Vector4,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Subtract(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Subtract(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Subtract(CitizenFX.Core.Vector4@,System.Single@,CitizenFX.Core.Vector4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtraced from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Subtract(CitizenFX.Core.Vector4,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtraced from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Subtract(System.Single@,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtraced from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Subtract(System.Single,CitizenFX.Core.Vector4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtraced from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Multiply(CitizenFX.Core.Vector4@,System.Single,CitizenFX.Core.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Multiply(CitizenFX.Core.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Multiply(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Multiply(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Divide(CitizenFX.Core.Vector4@,System.Single,CitizenFX.Core.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Divide(CitizenFX.Core.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Divide(System.Single,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Divide(System.Single,CitizenFX.Core.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Negate(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Negate(CitizenFX.Core.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Barycentric(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,System.Single,System.Single,CitizenFX.Core.Vector4@)">
            <summary>
            Returns a <see cref="T:CitizenFX.Core.Vector4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:CitizenFX.Core.Vector4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CitizenFX.Core.Vector4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CitizenFX.Core.Vector4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Barycentric(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4,CitizenFX.Core.Vector4,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:CitizenFX.Core.Vector4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:CitizenFX.Core.Vector4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CitizenFX.Core.Vector4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CitizenFX.Core.Vector4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:CitizenFX.Core.Vector4"/> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Clamp(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Clamp(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Distance(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:CitizenFX.Core.Vector4.DistanceSquared(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Distance(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:CitizenFX.Core.Vector4.DistanceSquared(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector4.DistanceSquared(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector4.DistanceSquared(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Dot(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Dot(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Normalize(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Normalize(CitizenFX.Core.Vector4)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Lerp(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,System.Single,CitizenFX.Core.Vector4@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Lerp(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CitizenFX.Core.Vector4.SmoothStep(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,System.Single,CitizenFX.Core.Vector4@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.SmoothStep(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Hermite(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,System.Single,CitizenFX.Core.Vector4@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Hermite(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4,CitizenFX.Core.Vector4,CitizenFX.Core.Vector4,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.CatmullRom(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,System.Single,CitizenFX.Core.Vector4@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.CatmullRom(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4,CitizenFX.Core.Vector4,CitizenFX.Core.Vector4,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Max(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Max(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Min(CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@,CitizenFX.Core.Vector4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Min(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Orthogonalize(CitizenFX.Core.Vector4[],CitizenFX.Core.Vector4[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Orthonormalize(CitizenFX.Core.Vector4[],CitizenFX.Core.Vector4[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Transform(CitizenFX.Core.Vector4@,CitizenFX.Core.Quaternion@,CitizenFX.Core.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:CitizenFX.Core.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CitizenFX.Core.Quaternion"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:CitizenFX.Core.Vector4"/>.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Transform(CitizenFX.Core.Vector4,CitizenFX.Core.Quaternion)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:CitizenFX.Core.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CitizenFX.Core.Quaternion"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:CitizenFX.Core.Vector4"/>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Transform(CitizenFX.Core.Vector4[],CitizenFX.Core.Quaternion@,CitizenFX.Core.Vector4[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:CitizenFX.Core.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:CitizenFX.Core.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Transform(CitizenFX.Core.Vector4@,CitizenFX.Core.Matrix@,CitizenFX.Core.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:CitizenFX.Core.Vector4"/>.</param>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Transform(CitizenFX.Core.Vector4,CitizenFX.Core.Matrix)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <returns>The transformed <see cref="T:CitizenFX.Core.Vector4"/>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Transform(CitizenFX.Core.Vector4[],CitizenFX.Core.Matrix@,CitizenFX.Core.Vector4[])">
            <summary>
            Transforms an array of 4D vectors by the given <see cref="T:CitizenFX.Core.Matrix"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:CitizenFX.Core.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Addition(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Multiply(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to <see cref="!:Multiply(ref SharpDX.Vector4,ref SharpDX.Vector4,out SharpDX.Vector4)"/>.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_UnaryPlus(CitizenFX.Core.Vector4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Subtraction(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_UnaryNegation(CitizenFX.Core.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Multiply(System.Single,CitizenFX.Core.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Multiply(CitizenFX.Core.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Division(CitizenFX.Core.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Division(System.Single,CitizenFX.Core.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>        
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Division(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Addition(CitizenFX.Core.Vector4,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Addition(System.Single,CitizenFX.Core.Vector4)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Subtraction(CitizenFX.Core.Vector4,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtraced from elements</param>
            <returns>The vector with subtraced scalar from each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Subtraction(System.Single,CitizenFX.Core.Vector4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtraced from elements</param>
            <returns>The vector with subtraced scalar from each element.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Equality(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Inequality(CitizenFX.Core.Vector4,CitizenFX.Core.Vector4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Explicit(CitizenFX.Core.Vector4)~CitizenFX.Core.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:CitizenFX.Core.Vector4"/> to <see cref="T:CitizenFX.Core.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.op_Explicit(CitizenFX.Core.Vector4)~CitizenFX.Core.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:CitizenFX.Core.Vector4"/> to <see cref="T:CitizenFX.Core.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Equals(CitizenFX.Core.Vector4@)">
            <summary>
            Determines whether the specified <see cref="T:CitizenFX.Core.Vector4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CitizenFX.Core.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CitizenFX.Core.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Equals(CitizenFX.Core.Vector4)">
            <summary>
            Determines whether the specified <see cref="T:CitizenFX.Core.Vector4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CitizenFX.Core.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CitizenFX.Core.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Vector4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.ADD_BLIP_FOR_COORD">
            <summary>
            Creates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.ADD_BLIP_FOR_ENTITY">
            <summary>
            Returns red ( default ) blip attached to entity.
            Example:
            Blip blip; //Put this outside your case or option
            blip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);
            HUD::SET_BLIP_AS_FRIENDLY(blip, true);
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.ADD_PED_DECORATION_FROM_HASHES">
            <summary>
            Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
            collection - PedDecorationCollection filename hash
            overlay - Item name hash
            Example:
            Entry inside "mpbeach_overlays.xml" -
            &lt;Item&gt;
              &lt;uvPos x="0.500000" y="0.500000" /&gt;
              &lt;scale x="0.600000" y="0.500000" /&gt;
              &lt;rotation value="0.000000" /&gt;
              &lt;nameHash&gt;FM_Hair_Fuzz&lt;/nameHash&gt;
              &lt;txdHash&gt;mp_hair_fuzz&lt;/txdHash&gt;
              &lt;txtHash&gt;mp_hair_fuzz&lt;/txtHash&gt;
              &lt;zone&gt;ZONE_HEAD&lt;/zone&gt;
              &lt;type&gt;TYPE_TATTOO&lt;/type&gt;
              &lt;faction&gt;FM&lt;/faction&gt;
              &lt;garment&gt;All&lt;/garment&gt;
              &lt;gender&gt;GENDER_DONTCARE&lt;/gender&gt;
              &lt;award /&gt;
              &lt;awardLevel /&gt;
            &lt;/Item&gt;
            Code:
            PED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.ADD_STATE_BAG_CHANGE_HANDLER">
            <summary>
            Adds a handler for changes to a state bag.
            
            The function called expects to match the following signature:
            
            ```ts
            function StateBagChangeHandler(bagName: string, key: string, value: any, reserved: number, replicated: boolean);
            ```
            
            *   **bagName**: The internal bag ID for the state bag which changed. This is usually `player:Source`, `entity:NetID`
                or `localEntity:Handle`.
            *   **key**: The changed key.
            *   **value**: The new value stored at key. The old value is still stored in the state bag at the time this callback executes.
            *   **reserved**: Currently unused.
            *   **replicated**: Whether the set is meant to be replicated.
            
            At this time, the change handler can't opt to reject changes.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.APPLY_FORCE_TO_ENTITY">
            <summary>
            Applies a force to the specified entity.
            
            **List of force types (p1)**:
            
            ```
            public enum ForceType
            {
                MinForce = 0,
                MaxForceRot = 1,
                MinForce2 = 2,
                MaxForceRot2 = 3,
                ForceNoRot = 4,
                ForceRotPlusForce = 5
            }
            ```
            
            Research/documentation on the gtaforums can be found [here](https://gtaforums.com/topic/885669-precisely-define-object-physics/) and [here](https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.CANCEL_EVENT">
            <summary>
            Cancels the currently executing event.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.CAN_PLAYER_START_COMMERCE_SESSION">
            <summary>
            Returns whether or not the specified player has enough information to start a commerce session for.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.CLEAR_PED_PROP">
            <summary>
            List of component/props ID  
            gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.CLEAR_PED_TASKS_IMMEDIATELY">
            <summary>
            Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.CLEAR_PLAYER_WANTED_LEVEL">
            <summary>
            This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);  
            PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.CREATE_OBJECT">
            <summary>
            Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model.
            This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.CREATE_OBJECT_NO_OFFSET">
            <summary>
            Creates an object (prop) with the specified model centered at the specified position.
            This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.CREATE_PED">
            <summary>
            Creates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading.
            This ped will initially be owned by the creating script as a mission entity, and the model should be loaded already
            (e.g. using REQUEST_MODEL).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.CREATE_VEHICLE">
            <summary>
            Creates a vehicle with the specified model at the specified position. This vehicle will initially be owned by the creating
            script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
            
            ```
            NativeDB Added Parameter 8: BOOL p7
            ```
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.DELETE_ENTITY">
            <summary>
            Deletes the specified entity.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.DELETE_RESOURCE_KVP_NO_SYNC">
            <summary>
            Nonsynchronous [DELETE_RESOURCE_KVP](#\_0x7389B5DF) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.DOES_PLAYER_OWN_SKU">
            <summary>
            Requests whether or not the player owns the specified SKU.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.DOES_PLAYER_OWN_SKU_EXT">
            <summary>
            Requests whether or not the player owns the specified package.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.ENSURE_ENTITY_STATE_BAG">
            <summary>
            Internal function for ensuring an entity has a state bag.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.FLUSH_RESOURCE_KVP">
            <summary>
            Nonsynchronous operations will not wait for a disk/filesystem flush before returning from a write or delete call. They will be much faster than their synchronous counterparts (e.g., bulk operations), however, a system crash may lose the data to some recent operations.
            
            This native ensures all `_NO_SYNC` operations are synchronized with the disk/filesystem.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.FREEZE_ENTITY_POSITION">
            <summary>
            Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_ALL_OBJECTS">
            <summary>
            Returns all object handles known to the server.
            The data returned adheres to the following layout:
            
            ```
            [127, 42, 13, 37]
            ```
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_ALL_PEDS">
            <summary>
            Returns all peds handles known to the server.
            The data returned adheres to the following layout:
            
            ```
            [127, 42, 13, 37]
            ```
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_ALL_VEHICLES">
            <summary>
            Returns all vehicle handles known to the server.
            The data returned adheres to the following layout:
            
            ```
            [127, 42, 13, 37]
            ```
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_CONSOLE_BUFFER">
            <summary>
            Returns the current console output buffer.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_CURRENT_RESOURCE_NAME">
            <summary>
            Returns the name of the currently executing resource.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_ENTITY_ATTACHED_TO">
            <summary>
            Gets the entity that this entity is attached to.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_ENTITY_COORDS">
            <summary>
            Gets the current coordinates for a specified entity. This native is used server side when using OneSync.
            
            See [GET_ENTITY_COORDS](#\_0x3FEF770D40960D5A) for client side.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_ENTITY_HEALTH">
            <summary>
            Currently it only works with peds.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_ENTITY_MAX_HEALTH">
            <summary>
            Currently it only works with peds.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_ENTITY_POPULATION_TYPE">
            <summary>
            This native gets an entity's population type.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_ENTITY_ROUTING_BUCKET">
            <summary>
            Gets the routing bucket for the specified entity.
            
            Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_ENTITY_SPEED">
            <summary>
            Gets the current speed of the entity in meters per second.
            
            ```
            To convert to MPH: speed * 2.236936
            To convert to KPH: speed * 3.6
            ```
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_GAME_BUILD_NUMBER">
            <summary>
            Returns the internal build number of the current game being executed.
            
            Possible values:
            
            *   FiveM
                *   1604
                *   2060
                *   2189
                *   2372
                *   2545
            *   RedM
                *   1311
                *   1355
                *   1436
            *   LibertyM
                *   43
            *   FXServer
                *   0
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_GAME_NAME">
            <summary>
            Returns the current game being executed.
            
            Possible values:
            
            | Return value | Meaning                        |
            | ------------ | ------------------------------ |
            | `fxserver`   | Server-side code ('Duplicity') |
            | `fivem`      | FiveM for GTA V                |
            | `libertym`   | LibertyM for GTA IV            |
            | `redm`       | RedM for Red Dead Redemption 2 |
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_GAME_TIMER">
            <summary>
            Gets the current game timer in milliseconds.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_HASH_KEY">
            <summary>
            This native converts the passed string to a hash.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_LANDING_GEAR_STATE">
            <summary>
            See the client-side [GET_LANDING_GEAR_STATE](#\_0x9B0F3DCA3DB0F4CD) native for a description of landing gear states.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_NUM_RESOURCE_METADATA">
            <summary>
            Gets the amount of metadata values with the specified key existing in the specified resource's manifest.
            See also: [Resource manifest](https://docs.fivem.net/resources/manifest/)
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PED_SCRIPT_TASK_COMMAND">
            <summary>
            Gets the script task command currently assigned to the ped.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PED_SCRIPT_TASK_STAGE">
            <summary>
            Gets the stage of the peds scripted task.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PED_SOURCE_OF_DAMAGE">
            <summary>
            Get the last entity that damaged the ped. This native is used server side when using OneSync.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PED_SOURCE_OF_DEATH">
            <summary>
            Get the entity that killed the ped. This native is used server side when using OneSync.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PED_SPECIFIC_TASK_TYPE">
            <summary>
            Gets the type of a ped's specific task given an index of the CPedTaskSpecificDataNode nodes.
            A ped will typically have a task at index 0, if a ped has multiple tasks at once they will be in the order 0, 1, 2, etc.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PLAYER_CAMERA_ROTATION">
            <summary>
            Gets the current camera rotation for a specified player. This native is used server side when using OneSync.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PLAYER_FAKE_WANTED_LEVEL">
            <summary>
            Gets the current fake wanted level for a specified player. This native is used server side when using OneSync.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER">
            <summary>
            A getter for [SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER](#\_0x4A3DC7ECCC321032).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PLAYER_ROUTING_BUCKET">
            <summary>
            Gets the routing bucket for the specified player.
            
            Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PLAYER_TIME_IN_PURSUIT">
            <summary>
            Gets the amount of time player has spent evading the cops.
            Counter starts and increments only when cops are chasing the player.
            If the player is evading, the timer will pause.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PLAYER_TOKEN">
            <summary>
            Gets a player's token. Tokens can be used to enhance banning logic, however are specific to a server.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PLAYER_WANTED_CENTRE_POSITION">
            <summary>
            Gets the current known coordinates for the specified player from cops perspective. This native is used server side when using OneSync.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PLAYER_WANTED_LEVEL">
            <summary>
            Returns given players wanted level server-side.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PLAYER_WEAPON_DAMAGE_MODIFIER">
            <summary>
            A getter for [SET_PLAYER_WEAPON_DAMAGE_MODIFIER](#\_0xCE07B9F7817AADA3).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PLAYER_WEAPON_DEFENSE_MODIFIER">
            <summary>
            A getter for [SET_PLAYER_WEAPON_DEFENSE_MODIFIER](#\_0x2D83BC011CA14A3C).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_PLAYER_WEAPON_DEFENSE_MODIFIER_2">
            <summary>
            A getter for [\_SET_PLAYER_WEAPON_DEFENSE_MODIFIER\_2](#\_0xBCFDE9EDE4CF27DC).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_REGISTERED_COMMANDS">
            <summary>
            Returns all commands that are registered in the command system.
            The data returned adheres to the following layout:
            
            ```
            [
            {
            "name": "cmdlist"
            },
            {
            "name": "command1"
            }
            ]
            ```
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_RESOURCE_KVP_FLOAT">
            <summary>
            A getter for [SET_RESOURCE_KVP_FLOAT](#\_0x9ADD2938).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_RESOURCE_KVP_INT">
            <summary>
            A getter for [SET_RESOURCE_KVP_INT](#\_0x6A2B1E8).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_RESOURCE_KVP_STRING">
            <summary>
            A getter for [SET_RESOURCE_KVP](#\_0x21C7A35B).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_RESOURCE_METADATA">
            <summary>
            Gets the metadata value at a specified key/index from a resource's manifest.
            See also: [Resource manifest](https://docs.fivem.net/resources/manifest/)
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_RESOURCE_PATH">
            <summary>
            Returns the physical on-disk path of the specified resource.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_RESOURCE_STATE">
            <summary>
            Returns the current state of the specified resource.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_SELECTED_PED_WEAPON">
            <summary>
            Returns a hash of selected ped weapon.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_STATE_BAG_VALUE">
            <summary>
            Returns the value of a state bag key.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER">
            <summary>
            Currently it only works when set to "all players".
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_VEHICLE_DOOR_LOCK_STATUS">
            <summary>
            enum VehicleLockStatus = {
                None = 0,
                Unlocked = 1,
                Locked = 2,
                LockedForPlayer = 3,
                StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.
                CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1
                CanBeBrokenIntoPersist = 8, -- Can be broken into persist
                CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).
            }
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_VEHICLE_FLIGHT_NOZZLE_POSITION">
            <summary>
            Gets the flight nozzel position for the specified vehicle. See the client-side [\_GET_VEHICLE_FLIGHT_NOZZLE_POSITION](#\_0xDA62027C8BDB326E) native for usage examples.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_VEHICLE_HOMING_LOCKON_STATE">
            <summary>
            Gets the lock on state for the specified vehicle. See the client-side [GET_VEHICLE_HOMING_LOCKON_STATE](#\_0xE6B0E8CFC3633BF0) native for a description of lock on states.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_VEHICLE_LOCK_ON_TARGET">
            <summary>
            Gets the vehicle that is locked on to for the specified vehicle.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_VEHICLE_PED_IS_IN">
            <summary>
            Gets the vehicle the specified Ped is/was in depending on bool value. This native is used server side when using OneSync.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.GET_VEHICLE_TYPE">
            <summary>
            Returns the type of the passed vehicle.
            
            ### Vehicle types
            
            *   automobile
            *   bike
            *   boat
            *   heli
            *   plane
            *   submarine
            *   trailer
            *   train
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.IS_DUPLICITY_VERSION">
            <summary>
            Gets whether or not this is the CitizenFX server.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.IS_ENTITY_VISIBLE">
            <summary>
            This native checks if the given entity is visible.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.IS_PED_A_PLAYER">
            <summary>
            This native checks if the given ped is a player.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.IS_PLAYER_COMMERCE_INFO_LOADED">
            <summary>
            Requests whether or not the commerce data for the specified player has loaded.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.IS_PLAYER_COMMERCE_INFO_LOADED_EXT">
            <summary>
            Requests whether or not the commerce data for the specified player has loaded from Tebex.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.IS_PLAYER_EVADING_WANTED_LEVEL">
            <summary>
            This will return true if the player is evading wanted level, meaning that the wanted level stars are blink.
            Otherwise will return false.
            
            If the player is not wanted, it simply returns false.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.LOAD_PLAYER_COMMERCE_DATA">
            <summary>
            Requests the commerce data for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.LOAD_PLAYER_COMMERCE_DATA_EXT">
            <summary>
            Requests the commerce data from Tebex for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.LOAD_RESOURCE_FILE">
            <summary>
            Reads the contents of a text file in a specified resource.
            If executed on the client, this file has to be included in `files` in the resource manifest.
            Example: `local data = LoadResourceFile("devtools", "data.json")`
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.MUMBLE_CREATE_CHANNEL">
            <summary>
            Create a permanent voice channel.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.MUMBLE_IS_PLAYER_MUTED">
            <summary>
            Checks if the player is currently muted
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.MUMBLE_SET_PLAYER_MUTED">
            <summary>
            Mutes or unmutes the specified player
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.NETWORK_GET_ENTITY_OWNER">
            <summary>
            Returns the owner ID of the specified entity.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.NETWORK_GET_FIRST_ENTITY_OWNER">
            <summary>
            Returns the first owner ID of the specified entity.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.PRINT_STRUCTURED_TRACE">
            <summary>
            Prints 'structured trace' data to the server `file descriptor 3` channel. This is not generally useful outside of
            server monitoring utilities.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.PROFILER_ENTER_SCOPE">
            <summary>
            Scope entry for profiler.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.PROFILER_EXIT_SCOPE">
            <summary>
            Scope exit for profiler.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.PROFILER_IS_RECORDING">
            <summary>
            Returns true if the profiler is active.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.REGISTER_COMMAND">
            <summary>
            Registered commands can be executed by entering them in the client console (this works for client side and server side registered commands). Or by entering them in the server console/through an RCON client (only works for server side registered commands). Or if you use a supported chat resource, like the default one provided in the cfx-server-data repository, then you can enter the command in chat by prefixing it with a `/`.
            
            Commands registered using this function can also be executed by resources, using the [`ExecuteCommand` native](#\_0x561C060B).
            
            The restricted bool is not used on the client side. Permissions can only be checked on the server side, so if you want to limit your command with an ace permission automatically, make it a server command (by registering it in a server script).
            
            **Example result**:
            
            ![](https://i.imgur.com/TaCnG09.png)
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.REGISTER_CONSOLE_LISTENER">
            <summary>
            Registers a listener for console output messages.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.REGISTER_RESOURCE_ASSET">
            <summary>
            **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
            
            Registers a cached resource asset with the resource system, similar to the automatic scanning of the `stream/` folder.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.REGISTER_RESOURCE_AS_EVENT_HANDLER">
            <summary>
            An internal function which allows the current resource's HLL script runtimes to receive state for the specified event.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.REGISTER_RESOURCE_BUILD_TASK_FACTORY">
            <summary>
            Registers a build task factory for resources.
            The function should return an object (msgpack map) with the following fields:
            
            ```
            {
            // returns whether the specific resource should be built
            shouldBuild = func(resourceName: string): bool,
            
            // asynchronously start building the specific resource.
            // call cb when completed
            build = func(resourceName: string, cb: func(success: bool, status: string): void): void
            }
            ```
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.REMOVE_ALL_PED_WEAPONS">
            <summary>
            setting the last params to false it does that same so I would suggest its not a toggle
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.REMOVE_BLIP">
            <summary>
            In the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.
            E.g.:
            Ped pped = PLAYER::PLAYER_PED_ID();
            Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);
            Blip b = HUD::ADD_BLIP_FOR_ENTITY(v);
            works fine.
            But later attempting to delete it with:
            Blip b = HUD::GET_BLIP_FROM_ENTITY(v);
            if (HUD::DOES_BLIP_EXIST(b)) HUD::REMOVE_BLIP(&amp;b);
            doesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).
            Thus for me, HUD::REMOVE_BLIP(&amp;b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.
            -------------
            Passing the address of the variable instead of the value works for me.
            e.g.
            int blip = HUD::ADD_BLIP_FOR_ENTITY(ped);
            HUD::REMOVE_BLIP(&amp;blip);
            Remove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'.
            --
            It crashes my game.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.REMOVE_STATE_BAG_CHANGE_HANDLER">
            <summary>
            **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
            
            Removes a handler for changes to a state bag.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.REMOVE_WEAPON_FROM_PED">
            <summary>
            This native removes a specified weapon from your selected ped.  
            Weapon Hashes: pastebin.com/0wwDZgkF  
            Example:  
            C#:  
            Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);  
            C++:  
            WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);  
            The code above removes the knife from the player.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.REQUEST_PLAYER_COMMERCE_SESSION">
            <summary>
            Requests the specified player to buy the passed SKU. This'll pop up a prompt on the client, which upon acceptance
            will open the browser prompting further purchase details.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SAVE_RESOURCE_FILE">
            <summary>
            Writes the specified data to a file in the specified resource.
            Using a length of `-1` will automatically detect the length assuming the data is a C string.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SCHEDULE_RESOURCE_TICK">
            <summary>
            Schedules the specified resource to run a tick as soon as possible, bypassing the server's fixed tick rate.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_BLIP_SPRITE">
            <summary>
            &lt;!--
            _loc1_.map((name, idx) =&gt; `| ${idx} | ${name} | ![${name}](https://runtime.fivem.net/blips/${name}.svg) |`).join('\n')
            --&gt;
            
            Sets the displayed sprite for a specific blip.
            
            There's a [list of sprites](https://docs.fivem.net/game-references/blips/) on the FiveM documentation site.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_ENTITY_COORDS">
            <summary>
            Sets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_ENTITY_DISTANCE_CULLING_RADIUS">
            <summary>
            It overrides the default distance culling radius of an entity. Set to `0.0` to reset.
            If you want to interact with an entity outside of your players' scopes set the radius to a huge number.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_ENTITY_HEADING">
            <summary>
            Set the heading of an entity in degrees also known as "Yaw".
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_ENTITY_ROUTING_BUCKET">
            <summary>
            Sets the routing bucket for the specified entity.
            
            Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_ENTITY_VELOCITY">
            <summary>
            Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PED_AMMO">
            <summary>
            NativeDB Added Parameter 4: BOOL p3
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PED_ARMOUR">
            <summary>
            Sets the armor of the specified ped.  
            ped: The Ped to set the armor of.  
            amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PED_COMPONENT_VARIATION">
            <summary>
            This native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model.
            
            ### MP Freemode list of components
            
            **0**: Face\
            **1**: Mask\
            **2**: Hair\
            **3**: Torso\
            **4**: Leg\
            **5**: Parachute / bag\
            **6**: Shoes\
            **7**: Accessory\
            **8**: Undershirt\
            **9**: Kevlar\
            **10**: Badge\
            **11**: Torso 2
            
            ### Related and useful natives
            
            [GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS](#\_0x27561561732A7842)\
            [GET_NUMBER_OF_PED_TEXTURE_VARIATIONS](#\_0x8F7156A3142A6BAD)
            
            [List of component/props ID](gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html) of player_two with examples
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PED_CONFIG_FLAG">
            <summary>
            cpp
            // Potential names and hash collisions included as comments
            enum ePedConfigFlags {
            	_0x67D1A445 = 0,
            	_0xC63DE95E = 1,
            	CPED_CONFIG_FLAG_NoCriticalHits = 2,
            	CPED_CONFIG_FLAG_DrownsInWater = 3,
            	CPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,
            	_0x37D196F4 = 5,
            	_0xE2462399 = 6,
            	CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,
            	_0xEDDEB838 = 8,
            	_0xB398B6FD = 9,
            	_0xF6664E68 = 10,
            	_0xA05E7CA3 = 11,
            	_0xCE394045 = 12,
            	CPED_CONFIG_FLAG_NeverLeavesGroup = 13,
            	_0xCD8D1411 = 14,
            	_0xB031F1A9 = 15,
            	_0xFE65BEE3 = 16,
            	CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,
            	_0x380165BD = 18,
            	_0x07C045C7 = 19,
            	_0x583B5E2D = 20,
            	_0x475EDA58 = 21,
            	_0x8629D05B = 22,
            	_0x1522968B = 23,
            	CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,
            	_0x4CC09C4B = 25,
            	_0x034F3053 = 26,
            	_0xD91BA7CC = 27,
            	_0x5C8DC66E = 28,
            	_0x8902EAA0 = 29,
            	_0x6580B9D2 = 30,
            	_0x0EF7A297 = 31,
            	_0x6BF86E5B = 32,
            	CPED_CONFIG_FLAG_DieWhenRagdoll = 33,
            	CPED_CONFIG_FLAG_HasHelmet = 34,
            	CPED_CONFIG_FLAG_UseHelmet = 35,
            	_0xEEB3D630 = 36,
            	_0xB130D17B = 37,
            	_0x5F071200 = 38,
            	CPED_CONFIG_FLAG_DisableEvasiveDives = 39,
            	_0xC287AAFF = 40,
            	_0x203328CC = 41,
            	CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,
            	CPED_CONFIG_FLAG_DisablePlayerLockon = 43,
            	CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,
            	_0xEC4A8ACF = 45,
            	_0xDB115BFA = 46,
            	CPED_CONFIG_FLAG_PedBeingDeleted = 47,
            	CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,
            	_0xF8E99565 = 49,
            	_0xDD17FEE6 = 50,
            	_0x7ED9B2C9 = 51,
            	_0x655E8618 = 52,
            	_0x5A6C1F6E = 53,
            	_0xD749FC41 = 54,
            	_0x357F63F3 = 55,
            	_0xC5E60961 = 56,
            	_0x29275C3E = 57,
            	CPED_CONFIG_FLAG_IsFiring = 58,
            	CPED_CONFIG_FLAG_WasFiring = 59,
            	CPED_CONFIG_FLAG_IsStanding = 60,
            	CPED_CONFIG_FLAG_WasStanding = 61,
            	CPED_CONFIG_FLAG_InVehicle = 62,
            	CPED_CONFIG_FLAG_OnMount = 63,
            	CPED_CONFIG_FLAG_AttachedToVehicle = 64,
            	CPED_CONFIG_FLAG_IsSwimming = 65,
            	CPED_CONFIG_FLAG_WasSwimming = 66,
            	CPED_CONFIG_FLAG_IsSkiing = 67,
            	CPED_CONFIG_FLAG_IsSitting = 68,
            	CPED_CONFIG_FLAG_KilledByStealth = 69,
            	CPED_CONFIG_FLAG_KilledByTakedown = 70,
            	CPED_CONFIG_FLAG_Knockedout = 71,
            	_0x3E3C4560 = 72,
            	_0x2994C7B7 = 73,
            	_0x6D59D275 = 74,
            	CPED_CONFIG_FLAG_UsingCoverPoint = 75,
            	CPED_CONFIG_FLAG_IsInTheAir = 76,
            	_0x2D493FB7 = 77,
            	CPED_CONFIG_FLAG_IsAimingGun = 78,
            	_0x14D69875 = 79,
            	_0x40B05311 = 80,
            	_0x8B230BC5 = 81,
            	_0xC74E5842 = 82,
            	_0x9EA86147 = 83,
            	_0x674C746C = 84,
            	_0x3E56A8C2 = 85,
            	_0xC144A1EF = 86,
            	_0x0548512D = 87,
            	_0x31C93909 = 88,
            	_0xA0269315 = 89,
            	_0xD4D59D4D = 90,
            	_0x411D4420 = 91,
            	_0xDF4AEF0D = 92,
            	CPED_CONFIG_FLAG_ForcePedLoadCover = 93,
            	_0x300E4CD3 = 94,
            	_0xF1C5BF04 = 95,
            	_0x89C2EF13 = 96,
            	CPED_CONFIG_FLAG_VaultFromCover = 97,
            	_0x02A852C8 = 98,
            	_0x3D9407F1 = 99,
            	_0x319B4558 = 100,
            	CPED_CONFIG_FLAG_ForcedAim = 101,
            	_0xB942D71A = 102,
            	_0xD26C55A8 = 103,
            	_0xB89E703B = 104,
            	CPED_CONFIG_FLAG_ForceReload = 105,
            	_0xD9E73DA2 = 106,
            	_0xFF71DC2C = 107,
            	_0x1E27E8D8 = 108,
            	_0xF2C53966 = 109,
            	_0xC4DBE247 = 110,
            	_0x83C0A4BF = 111,
            	_0x0E0FAF8C = 112,
            	_0x26616660 = 113,
            	_0x43B80B79 = 114,
            	_0x0D2A9309 = 115,
            	_0x12C1C983 = 116,
            	CPED_CONFIG_FLAG_BumpedByPlayer = 117,
            	_0xE586D504 = 118,
            	_0x52374204 = 119,
            	CPED_CONFIG_FLAG_IsHandCuffed = 120,
            	CPED_CONFIG_FLAG_IsAnkleCuffed = 121,
            	CPED_CONFIG_FLAG_DisableMelee = 122,
            	_0xFE714397 = 123,
            	_0xB3E660BD = 124,
            	_0x5FED6BFD = 125,
            	_0xC9D6F66F = 126,
            	_0x519BC986 = 127,
            	CPED_CONFIG_FLAG_CanBeAgitated = 128,
            	_0x9A4B617C = 129, // CPED_CONFIG_FLAG_FaceDirInsult
            	_0xDAB70E9F = 130,
            	_0xE569438A = 131,
            	_0xBBC77D6D = 132,
            	_0xCB59EF0F = 133,
            	_0x8C5EA971 = 134,
            	CPED_CONFIG_FLAG_IsScuba = 135,
            	CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
            	_0xDCE59B58 = 137,
            	CPED_CONFIG_FLAG_RidingTrain = 138,
            	CPED_CONFIG_FLAG_ArrestResult = 139,
            	CPED_CONFIG_FLAG_CanAttackFriendly = 140,
            	_0x98A4BE43 = 141,
            	_0x6901E731 = 142,
            	_0x9EC9BF6C = 143,
            	_0x42841A8F = 144,
            	CPED_CONFIG_FLAG_ShootingAnimFlag = 145,
            	CPED_CONFIG_FLAG_DisableLadderClimbing = 146,
            	CPED_CONFIG_FLAG_StairsDetected = 147,
            	CPED_CONFIG_FLAG_SlopeDetected = 148,
            	_0x1A15670B = 149,
            	_0x61786EE5 = 150,
            	_0xCB9186BD = 151,
            	_0xF0710152 = 152,
            	_0x43DFE310 = 153,
            	_0xC43C624E = 154,
            	CPED_CONFIG_FLAG_CanPerformArrest = 155,
            	CPED_CONFIG_FLAG_CanPerformUncuff = 156,
            	CPED_CONFIG_FLAG_CanBeArrested = 157,
            	_0xF7960FF5 = 158,
            	_0x59564113 = 159,
            	_0x0C6C3099 = 160,
            	_0x645F927A = 161,
            	_0xA86549B9 = 162,
            	_0x8AAF337A = 163,
            	_0x13BAA6E7 = 164,
            	_0x5FB9D1F5 = 165,
            	CPED_CONFIG_FLAG_IsInjured = 166,
            	_0x6398A20B = 167,
            	_0xD8072639 = 168,
            	_0xA05B1845 = 169,
            	_0x83F6D220 = 170,
            	_0xD8430331 = 171,
            	_0x4B547520 = 172,
            	_0xE66E1406 = 173,
            	_0x1C4BFE0C = 174,
            	_0x90008BFA = 175,
            	_0x07C7A910 = 176,
            	_0xF15F8191 = 177,
            	_0xCE4E8BE2 = 178,
            	_0x1D46E4F2 = 179,
            	CPED_CONFIG_FLAG_IsInCustody = 180,
            	_0xE4FD9B3A = 181,
            	_0x67AE0812 = 182,
            	CPED_CONFIG_FLAG_IsAgitated = 183,
            	CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,
            	_0x7B2D325E = 185,
            	CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,
            	CPED_CONFIG_FLAG_HasHurtStarted = 187,
            	CPED_CONFIG_FLAG_DisableHurt = 188,
            	CPED_CONFIG_FLAG_PlayerIsWeird = 189,
            	_0x32FC208B = 190,
            	_0x0C296E5A = 191,
            	_0xE63B73EC = 192,
            	_0x04E9CC80 = 193,
            	CPED_CONFIG_FLAG_UsingScenario = 194,
            	CPED_CONFIG_FLAG_VisibleOnScreen = 195,
            	_0xD88C58A1 = 196,
            	_0x5A3DCF43 = 197, // CPED_CONFIG_FLAG_AvoidUnderSide
            	_0xEA02B420 = 198,
            	_0x3F559CFF = 199,
            	_0x8C55D029 = 200,
            	_0x5E6466F6 = 201,
            	_0xEB5AD706 = 202,
            	_0x0EDDDDE7 = 203,
            	_0xA64F7B1D = 204,
            	_0x48532CBA = 205,
            	_0xAA25A9E7 = 206,
            	_0x415B26B9 = 207,
            	CPED_CONFIG_FLAG_DisableExplosionReactions = 208,
            	CPED_CONFIG_FLAG_DodgedPlayer = 209,
            	_0x67405504 = 210,
            	_0x75DDD68C = 211,
            	_0x2AD879B4 = 212,
            	_0x51486F91 = 213,
            	_0x32F79E21 = 214,
            	_0xBF099213 = 215,
            	_0x054AC8E2 = 216,
            	_0x14E495CC = 217,
            	_0x3C7DF9DF = 218,
            	_0x848FFEF2 = 219,
            	CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,
            	_0x2618E1CF = 221,
            	_0x84F722FA = 222,
            	_0xD1B87B1F = 223,
            	_0x728AA918 = 224,
            	CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
            	CPED_CONFIG_FLAG_DisablePedAvoidance = 226,
            	_0x59E91185 = 227,
            	_0x1EA7225F = 228,
            	CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,
            	_0x6DCA7D88 = 230,
            	_0xFC3E572D = 231,
            	_0x08E9F9CF = 232,
            	_0x2D3BA52D = 233,
            	_0xFD2F53EA = 234,
            	_0x31A1B03B = 235,
            	CPED_CONFIG_FLAG_IsHoldingProp = 236,
            	_0x82ED0A66 = 237, // CPED_CONFIG_FLAG_BlocksPathingWhenDead
            	_0xCE57C9A3 = 238,
            	_0x26149198 = 239,
            	_0x1B33B598 = 240,
            	_0x719B6E87 = 241,
            	_0x13E8E8E8 = 242,
            	_0xF29739AE = 243,
            	_0xABEA8A74 = 244,
            	_0xB60EA2BA = 245,
            	_0x536B0950 = 246,
            	_0x0C754ACA = 247,
            	_0x69D28F3E = 248,
            	_0x12659168 = 249,
            	_0x1BDF2F04 = 250,
            	_0x7728FAA3 = 251,
            	_0x6A807ED8 = 252,
            	CPED_CONFIG_FLAG_OnStairs = 253,
            	_0xE1A2F73F = 254,
            	_0x5B3697C8 = 255,
            	_0xF1EB20A9 = 256,
            	_0x8B7DF407 = 257,
            	_0x329DCF1A = 258,
            	_0x8D90DD1B = 259,
            	_0xB8A292B7 = 260,
            	_0x8374B087 = 261,
            	_0x2AF558F0 = 262,
            	_0x82251455 = 263,
            	_0x30CF498B = 264,
            	_0xE1CD50AF = 265,
            	_0x72E4AE48 = 266,
            	_0xC2657EA1 = 267,
            	_0x29FF6030 = 268,
            	_0x8248A5EC = 269,
            	CPED_CONFIG_FLAG_OnStairSlope = 270,
            	_0xA0897933 = 271,
            	CPED_CONFIG_FLAG_DontBlipCop = 272,
            	CPED_CONFIG_FLAG_ClimbedShiftedFence = 273,
            	_0xF7823618 = 274,
            	_0xDC305CCE = 275, // CPED_CONFIG_FLAG_KillWhenTrapped
            	CPED_CONFIG_FLAG_EdgeDetected = 276,
            	_0x92B67896 = 277,
            	_0xCAD677C9 = 278,
            	CPED_CONFIG_FLAG_AvoidTearGas = 279,
            	_0x5276AC7B = 280,
            	_0x1032692A = 281,
            	_0xDA23E7F1 = 282,
            	_0x9139724D = 283,
            	_0xA1457461 = 284,
            	_0x4186E095 = 285,
            	_0xAC68E2EB = 286,
            	CPED_CONFIG_FLAG_RagdollingOnBoat = 287,
            	CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
            	_0x1B9EE8A1 = 289,
            	_0xF3F5758C = 290,
            	_0x2A9307F1 = 291,
            	_0x7403D216 = 292,
            	_0xA06A3C6C = 293,
            	CPED_CONFIG_FLAG_DisableShockingEvents = 294,
            	_0xF8DA25A5 = 295,
            	_0x7EF55802 = 296,
            	_0xB31F1187 = 297,
            	_0x84315402 = 298,
            	_0x0FD69867 = 299,
            	_0xC7829B67 = 300,
            	CPED_CONFIG_FLAG_DisablePedConstraints = 301,
            	_0x6D23CF25 = 302,
            	_0x2ADA871B = 303,
            	_0x47BC8A58 = 304,
            	_0xEB692FA5 = 305,
            	_0x4A133C50 = 306,
            	_0xC58099C3 = 307,
            	_0xF3D76D41 = 308,
            	_0xB0EEE9F2 = 309,
            	CPED_CONFIG_FLAG_IsInCluster = 310,
            	_0x0FA153EF = 311,
            	_0xD73F5CD3 = 312,
            	_0xD4136C22 = 313,
            	_0xE404CA6B = 314,
            	_0xB9597446 = 315,
            	_0xD5C98277 = 316,
            	_0xD5060A9C = 317,
            	_0x3E5F1CBB = 318,
            	_0xD8BE1D54 = 319,
            	_0x0B1F191F = 320,
            	_0xC995167A = 321,
            	CPED_CONFIG_FLAG_HasHighHeels = 322,
            	_0x86B01E54 = 323,
            	_0x3A56FE15 = 324,
            	_0xC03B736C = 325, // CPED_CONFIG_FLAG_SpawnedAtScenario
            	_0xBBF47729 = 326,
            	_0x22B668A8 = 327,
            	_0x2624D4D4 = 328,
            	CPED_CONFIG_FLAG_DisableTalkTo = 329,
            	CPED_CONFIG_FLAG_DontBlip = 330,
            	CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
            	_0x630F55F3 = 332,
            	_0x150468FD = 333,
            	_0x914EBD6B = 334,
            	_0x79AF3B6D = 335,
            	_0x75C7A632 = 336,
            	_0x52D530E2 = 337,
            	_0xDB2A90E0 = 338,
            	_0x5922763D = 339,
            	_0x12ADB567 = 340,
            	_0x105C8518 = 341,
            	_0x106F703D = 342,
            	_0xED152C3E = 343,
            	_0xA0EFE6A8 = 344,
            	_0xBF348C82 = 345,
            	_0xCDDFE830 = 346,
            	_0x7B59BD9B = 347,
            	_0x0124C788 = 348,
            	CPED_CONFIG_FLAG_EquipJetpack = 349,
            	_0x08D361A5 = 350,
            	_0xE13D1F7C = 351,
            	_0x40E25FB9 = 352,
            	_0x930629D9 = 353,
            	_0xECCF0C7F = 354,
            	_0xB6E9613B = 355,
            	_0x490C0478 = 356,
            	_0xE8865BEA = 357,
            	_0xF3C34A29 = 358,
            	CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,
            	_0xF660E115 = 360,
            	_0xAB0E6DED = 361,
            	CPED_CONFIG_FLAG_HasReserveParachute = 362,
            	CPED_CONFIG_FLAG_UseReserveParachute = 363,
            	_0x5C5D9CD3 = 364,
            	_0x8F7701F3 = 365,
            	_0xBC4436AD = 366,
            	_0xD7E07D37 = 367,
            	_0x03C4FD24 = 368,
            	_0x7675789A = 369,
            	_0xB7288A88 = 370,
            	_0xC06B6291 = 371,
            	_0x95A4A805 = 372,
            	_0xA8E9A042 = 373,
            	CPED_CONFIG_FLAG_NeverLeaveTrain = 374,
            	_0xBAC674B3 = 375,
            	_0x147F1FFB = 376,
            	_0x4376DD79 = 377,
            	_0xCD3DB518 = 378,
            	_0xFE4BA4B6 = 379,
            	_0x5DF03A55 = 380,
            	_0xBCD816CD = 381,
            	_0xCF02DD69 = 382,
            	_0xF73AFA2E = 383,
            	_0x80B9A9D0 = 384,
            	_0xF601F7EE = 385,
            	_0xA91350FC = 386,
            	_0x3AB23B96 = 387,
            	CPED_CONFIG_FLAG_IsClimbingLadder = 388,
            	CPED_CONFIG_FLAG_HasBareFeet = 389,
            	_0xB4B1CD4C = 390,
            	_0x5459AFB8 = 391,
            	_0x54F27667 = 392,
            	_0xC11D3E8F = 393,
            	_0x5419EB3E = 394,
            	_0x82D8DBB4 = 395,
            	_0x33B02D2F = 396,
            	_0xAE66176D = 397,
            	_0xA2692593 = 398,
            	_0x714C7E31 = 399,
            	_0xEC488AC7 = 400,
            	_0xAE398504 = 401,
            	_0xABC58D72 = 402,
            	_0x5E5B9591 = 403,
            	_0x6BA1091E = 404,
            	_0x77840177 = 405,
            	_0x1C7ACAC4 = 406,
            	_0x124420E9 = 407,
            	_0x75A65587 = 408,
            	_0xDFD2D55B = 409,
            	_0xBDD39919 = 410,
            	_0x43DEC267 = 411,
            	_0xE42B7797 = 412,
            	CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,
            	_0x4F8149F5 = 414,
            	_0xDD9ECA7A = 415,
            	_0x9E7EF9D2 = 416,
            	_0x2C6ED942 = 417,
            	CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,
            	_0xA488727D = 419,
            	_0xCFF5F6DE = 420,
            	_0x6D614599 = 421,
            	CPED_CONFIG_FLAG_DisableVehicleCombat = 422,
            	_0xFE401D26 = 423,
            	CPED_CONFIG_FLAG_FallsLikeAircraft = 424,
            	_0x2B42AE82 = 425,
            	_0x7A95734F = 426,
            	_0xDF4D8617 = 427,
            	_0x578F1F14 = 428,
            	CPED_CONFIG_FLAG_DisableStartEngine = 429,
            	CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,
            	_0x153C9500 = 431,
            	_0xCB7A632E = 432,
            	_0xDE727981 = 433,
            	CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,
            	_0x12BBB935 = 435,
            	_0xAD0A1277 = 436,
            	_0xEA6AA46A = 437,
            	CPED_CONFIG_FLAG_DisableHelmetArmor = 438,
            	_0xCB7F3A1E = 439,
            	_0x50178878 = 440,
            	_0x051B4F0D = 441,
            	_0x2FC3DECC = 442,
            	_0xC0030B0B = 443,
            	_0xBBDAF1E9 = 444,
            	_0x944FE59C = 445,
            	_0x506FBA39 = 446,
            	_0xDD45FE84 = 447,
            	_0xE698AE75 = 448,
            	_0x199633F8 = 449,
            	CPED_CONFIG_FLAG_PedIsArresting = 450,
            	CPED_CONFIG_FLAG_IsDecoyPed = 451,
            	_0x3A251D83 = 452,
            	_0xA56F6986 = 453,
            	_0x1D19C622 = 454,
            	_0xB68D3EAB = 455,
            	CPED_CONFIG_FLAG_CanBeIncapacitated = 456,
            	_0x4BD5EBAD = 457,
            }
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PED_DEFAULT_COMPONENT_VARIATION">
            <summary>
            Sets Ped Default Clothes
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PED_HEAD_BLEND_DATA">
            <summary>
            The "shape" parameters control the shape of the ped's face. The "skin" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for "children" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.  
            The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.  
            !!!Can someone add working example for this???  
            try this:  
            headBlendData headData;  
            _GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &amp;headData);  
            SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond  
            	, headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);  
            For more info please refer to this topic.   
            gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PED_HEAD_OVERLAY">
            <summary>
            OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.   
            overlayID       Part                  Index, to disable  
            0               Blemishes             0 - 23, 255  
            1               Facial Hair           0 - 28, 255  
            2               Eyebrows              0 - 33, 255  
            3               Ageing                0 - 14, 255  
            4               Makeup                0 - 74, 255  
            5               Blush                 0 - 6, 255  
            6               Complexion            0 - 11, 255  
            7               Sun Damage            0 - 10, 255  
            8               Lipstick              0 - 9, 255  
            9               Moles/Freckles        0 - 17, 255  
            10              Chest Hair            0 - 16, 255  
            11              Body Blemishes        0 - 11, 255  
            12              Add Body Blemishes    0 - 1, 255
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PED_PROP_INDEX">
            <summary>
            This native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model.
            
            ### MP Freemode list of props
            
            **0**: Hat\
            **1**: Glass\
            **2**: Ear\
            **6**: Watch\
            **7**: Bracelet
            
            ### Related and useful natives
            
            [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\_0x5FAF9754E789FB47)\
            [GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\_0xA6E7F1CEB523E171)
            
            [List of component/props ID](gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html) of player_two with examples
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PED_RANDOM_COMPONENT_VARIATION">
            <summary>
            p1 is always 0 in R* scripts; and a quick disassembly seems to indicate that p1 is unused.  
            
            List of component/props ID:
            gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PED_RANDOM_PROPS">
            <summary>
            List of component/props ID  
            gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PED_RESET_FLAG">
            <summary>
            PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);
            Known values:
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PED_TO_RAGDOLL">
            <summary>
            p4/p5: Unusued in TU27
            
            ### Ragdoll Types
            
            **0**: CTaskNMRelax
            **1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
            **Else**: CTaskNMBalance
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PED_TO_RAGDOLL_WITH_FALL">
            <summary>
            Return variable is never used in R*'s scripts.  
            Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.  
            x, y, and z are coordinates, most likely to where the ped will fall.  
            p7 is probably the force of the fall, but untested, so I left the variable name the same.  
            p8 to p13 are always 0f in R*'s scripts.  
            (Simplified) Example of the usage of the function from R*'s scripts:  
            ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PLAYER_CONTROL">
            <summary>
            Flags:
            SPC_AMBIENT_SCRIPT = (1 &lt;&lt; 1),
            SPC_CLEAR_TASKS = (1 &lt;&lt; 2),
            SPC_REMOVE_FIRES = (1 &lt;&lt; 3),
            SPC_REMOVE_EXPLOSIONS = (1 &lt;&lt; 4),
            SPC_REMOVE_PROJECTILES = (1 &lt;&lt; 5),
            SPC_DEACTIVATE_GADGETS = (1 &lt;&lt; 6),
            SPC_REENABLE_CONTROL_ON_DEATH = (1 &lt;&lt; 7),
            SPC_LEAVE_CAMERA_CONTROL_ON = (1 &lt;&lt; 8),
            SPC_ALLOW_PLAYER_DAMAGE = (1 &lt;&lt; 9),
            SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 &lt;&lt; 10),
            SPC_PREVENT_EVERYBODY_BACKOFF = (1 &lt;&lt; 11),
            SPC_ALLOW_PAD_SHAKE = (1 &lt;&lt; 12)
            See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PLAYER_CULLING_RADIUS">
            <summary>
            Sets the culling radius for the specified player.
            Set to `0.0` to reset.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PLAYER_INVINCIBLE">
            <summary>
            Simply sets you as invincible (Health will not deplete).  
            Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:  
            *(DWORD *)(playerPedAddress + 0x188) |= (1 &lt;&lt; 9);
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PLAYER_MODEL">
            <summary>
            Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset
            Make sure to request the model first and wait until it has loaded.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PLAYER_ROUTING_BUCKET">
            <summary>
            Sets the routing bucket for the specified player.
            
            Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_PLAYER_WANTED_LEVEL">
            <summary>
            Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect  
            wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files  
            disableNoMission-  Disables When Off Mission- appears to always be false
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_RESOURCE_KVP">
            <summary>
            A setter for [GET_RESOURCE_KVP_STRING](#\_0x5240DA5A).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_RESOURCE_KVP_FLOAT">
            <summary>
            A setter for [GET_RESOURCE_KVP_FLOAT](#\_0x35BDCEEA).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_RESOURCE_KVP_FLOAT_NO_SYNC">
            <summary>
            Nonsynchronous [SET_RESOURCE_KVP_FLOAT](#\_0x9ADD2938) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_RESOURCE_KVP_INT">
            <summary>
            A setter for [GET_RESOURCE_KVP_INT](#\_0x557B586A).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_RESOURCE_KVP_INT_NO_SYNC">
            <summary>
            Nonsynchronous [SET_RESOURCE_KVP_INT](#\_0x6A2B1E8) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_RESOURCE_KVP_NO_SYNC">
            <summary>
            Nonsynchronous [SET_RESOURCE_KVP](#\_0x21C7A35B) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_ROUTING_BUCKET_ENTITY_LOCKDOWN_MODE">
            <summary>
            Sets the entity lockdown mode for a specific routing bucket.
            
            Lockdown modes are:
            
            | Mode       | Meaning                                                    |
            | ---------- | ---------------------------------------------------------- |
            | `strict`   | No entities can be created by clients at all.              |
            | `relaxed`  | Only script-owned entities created by clients are blocked. |
            | `inactive` | Clients can create any entity they want.                   |
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_ROUTING_BUCKET_POPULATION_ENABLED">
            <summary>
            Sets whether or not the specified routing bucket has automatically-created population enabled.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_STATE_BAG_VALUE">
            <summary>
            Internal function for setting a state bag value.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_VEHICLE_BODY_HEALTH">
            <summary>
            p2 often set to 1000.0 in the decompiled scripts.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_VEHICLE_COLOURS">
            <summary>
            colorPrimary &amp; colorSecondary are the paint indexes for the vehicle.
            
            For a list of valid paint indexes, view: pastebin.com/pwHci0xK
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_VEHICLE_COLOUR_COMBINATION">
            <summary>
            Sets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter).
            
            Range of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_VEHICLE_CUSTOM_PRIMARY_COLOUR">
            <summary>
            p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_VEHICLE_CUSTOM_SECONDARY_COLOUR">
            <summary>
            p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_VEHICLE_DIRT_LEVEL">
            <summary>
            Sets the dirt level of the passed vehicle.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_VEHICLE_DOORS_LOCKED">
            <summary>
            // Source GTA VC miss2 leak, matching constants for 0/2/4, testing
            // They use 10 in am_mp_property_int, don't know what it does atm.
            enum eCarLock {
                CARLOCK_NONE = 0,
                CARLOCK_UNLOCKED = 1,
                CARLOCK_LOCKED = 2,
                CARLOCK_LOCKOUT_PLAYER_ONLY = 3,
                CARLOCK_LOCKED_PLAYER_INSIDE = 4,
                CARLOCK_LOCKED_INITIALLY = 5,
                CARLOCK_FORCE_SHUT_DOORS = 6,
                CARLOCK_LOCKED_BUT_CAN_BE_DAMAGED = 7
            };
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.SET_VEHICLE_DOOR_BROKEN">
            <summary>
            See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TASK_COMBAT_PED">
            <summary>
            Makes the specified ped attack the target ped.  
            p2 should be 0  
            p3 should be 16
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TASK_DRIVE_BY">
            <summary>
            Example:
            TASK::TASK_DRIVE_BY(l_467[1 -- [[22]] ], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});
            Needs working example. Doesn't seem to do anything.
            I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
            I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
            I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TASK_ENTER_VEHICLE">
            <summary>
            speed 1.0 = walk, 2.0 = run  
            p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle  
            p6 is always 0
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TASK_GO_TO_COORD_ANY_MEANS">
            <summary>
            example from fm_mission_controller
            TASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TASK_GO_TO_ENTITY">
            <summary>
            The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
            Note: I've only tested it on entity -&gt; ped and target -&gt; vehicle. It could work differently on other entities, didn't try it yet.
            Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)
            Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TASK_HANDS_UP">
            <summary>
            In the scripts, p3 was always -1.  
            p3 seems to be duration or timeout of turn animation.  
            Also facingPed can be 0 or -1 so ped will just raise hands up.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TASK_LEAVE_ANY_VEHICLE">
            <summary>
            Flags are the same flags used in [`TASK_LEAVE_VEHICLE`](#\_0xD3DBCE61A490BE02)
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TASK_LEAVE_VEHICLE">
            <summary>
            Flags from decompiled scripts:  
            0 = normal exit and closes door.  
            1 = normal exit and closes door.  
            16 = teleports outside, door kept closed.  
            64 = normal exit and closes door, maybe a bit slower animation than 0.  
            256 = normal exit but does not close the door.  
            4160 = ped is throwing himself out, even when the vehicle is still.  
            262144 = ped moves to passenger seat first, then exits normally  
            Others to be tried out: 320, 512, 131072.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TASK_PLAY_ANIM">
            <summary>
            [Animations list](https://alexguirre.github.io/animations-list/)
            
            ```
            float blendInSpeed &gt; normal speed is 8.0f
            ----------------------  
            float blendOutSpeed &gt; normal speed is 8.0f
            ----------------------  
            int duration: time in millisecond  
            ----------------------  
            -1 _ _ _ _ _ _ _&gt; Default (see flag)  
            0 _ _ _ _ _ _ _ &gt; Not play at all  
            Small value _ _ &gt; Slow down animation speed  
            Other _ _ _ _ _ &gt; freeze player control until specific time (ms) has   
            _ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be   
            _ _ _ _ _ _ _ _ _ controllable.)  
            int flag:  
            ----------------------  
            enum eAnimationFlags  
            {  
             ANIM_FLAG_NORMAL = 0,  
               ANIM_FLAG_REPEAT = 1,  
               ANIM_FLAG_STOP_LAST_FRAME = 2,  
               ANIM_FLAG_UPPERBODY = 16,  
               ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,  
               ANIM_FLAG_CANCELABLE = 120,  
            };  
            Odd number : loop infinitely  
            Even number : Freeze at last frame  
            Multiple of 4: Freeze at last frame but controllable  
            01 to 15 &gt; Full body  
            10 to 31 &gt; Upper body  
            32 to 47 &gt; Full body &gt; Controllable  
            48 to 63 &gt; Upper body &gt; Controllable  
            ...  
            001 to 255 &gt; Normal  
            256 to 511 &gt; Garbled  
            ...  
            playbackRate:  
            values are between 0.0 and 1.0  
            lockX:    
            0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3  
            &gt; 1 for mini@sprunk  
            lockY:  
            0 in most cases   
            1 for missfam5_yoga, missfra1mcs_2_crew_react  
            lockZ:   
                0 for single player   
                Can be 1 but only for MP  
            ```
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TASK_PLAY_ANIM_ADVANCED">
            <summary>
            It's similar to the one above, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).
            
            [Animations list](https://alexguirre.github.io/animations-list/)
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TASK_SHOOT_AT_COORD">
            <summary>
            Firing Pattern Hash Information: https://pastebin.com/Px036isB
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TASK_SHOOT_AT_ENTITY">
            <summary>
            //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
            Entity aimedentity;
            Player player = PLAYER::PLAYER_ID();
            PLAYER::_GET_AIMED_ENTITY(player, &amp;aimedentity);
            //bg is an array of peds
            TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));
            in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.
            Firing Pattern Hash Information: https://pastebin.com/Px036isB
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TRIGGER_CLIENT_EVENT_INTERNAL">
            <summary>
            The backing function for TriggerClientEvent.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TRIGGER_EVENT_INTERNAL">
            <summary>
            The backing function for TriggerEvent.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.TRIGGER_LATENT_CLIENT_EVENT_INTERNAL">
            <summary>
            The backing function for TriggerLatentClientEvent.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash.WAS_EVENT_CANCELED">
            <summary>
            Returns whether or not the currently executing event was canceled.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash._ADD_BLIP_FOR_AREA">
            <summary>
            Adds a rectangular blip for the specified coordinates/area.
            
            It is recommended to use [SET_BLIP_ROTATION](#\_0xF87683CDF73C3F6E) and [SET_BLIP_COLOUR](#\_0x03D7FB09E75D6B7E) to make the blip not rotate along with the camera.
            
            By default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view.
            
            Example image:
            ![minimap](https://w.wew.wtf/pdcjig.png)
            ![big map](https://w.wew.wtf/zgcjcm.png)
            
            (Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash._SET_PED_EYE_COLOR">
            <summary>
            Used for freemode (online) characters.
            
            Indices:
            
            1.  black
            2.  very light blue/green
            3.  dark blue
            4.  brown
            5.  darker brown
            6.  light brown
            7.  blue
            8.  light blue
            9.  pink
            10. yellow
            11. purple
            12. black
            13. dark green
            14. light brown
            15. yellow/black pattern
            16. light colored spiral pattern
            17. shiny red
            18. shiny half blue/half red
            19. half black/half light blue
            20. white/red perimter
            21. green snake
            22. red snake
            23. dark blue snake
            24. dark yellow
            25. bright yellow
            26. all black
            27. red small pupil
            28. devil blue/black
            29. white small pupil
            30. glossed over
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash._SET_PED_FACE_FEATURE">
            <summary>
            Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.
            Index can be 0 - 19
            SET_PED_M*
            Here is the list of names. It starts at 0 and runs in sequence
            Face_Feature
            Nose_Width
            Nose_Peak_Hight
            Nose_Peak_Lenght
            Nose_Bone_High
            Nose_Peak_Lowering
            Nose_Bone_Twist
            EyeBrown_High
            EyeBrown_Forward
            Cheeks_Bone_High
            Cheeks_Bone_Width
            Cheeks_Width
            Eyes_Openning
            Lips_Thickness
            Jaw_Bone_Width: Bone size to sides
            Jaw_Bone_Back_Lenght: Bone size to back
            Chimp_Bone_Lowering: Go Down
            Chimp_Bone_Lenght: Go forward
            Chimp_Bone_Width
            Chimp_Hole
            Neck_Thikness
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash._SET_PED_HAIR_COLOR">
            <summary>
            Used for freemode (online) characters.
            </summary>
        </member>
        <member name="F:CitizenFX.Core.Native.Hash._SET_PED_HEAD_OVERLAY_COLOR">
            <summary>
            Used for freemode (online) characters.  
            ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.  
            Called after SET_PED_HEAD_OVERLAY().
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.AddBlipForArea(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a rectangular blip for the specified coordinates/area.
            It is recommended to use [SET_BLIP_ROTATION](#\_0xF87683CDF73C3F6E) and [SET_BLIP_COLOUR](#\_0x03D7FB09E75D6B7E) to make the blip not rotate along with the camera.
            By default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view.
            Example image:
            ![minimap](https://w.wew.wtf/pdcjig.png)
            ![big map](https://w.wew.wtf/zgcjcm.png)
            (Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)
            </summary>
            <param name="x">
            The X coordinate of the center of the blip.
            </param>
            <param name="y">
            The Y coordinate of the center of the blip.
            </param>
            <param name="z">
            The Z coordinate of the center of the blip.
            </param>
            <param name="width">
            The width of the blip.
            </param>
            <param name="height">
            The height of the blip.
            </param>
            <returns>
            A handle to the blip.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.AddBlipForCoord(System.Single,System.Single,System.Single)">
            <summary>
            Creates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip.
            </summary>
            <param name="x">
            The X coordinate to create the blip on.
            </param>
            <param name="y">
            The Y coordinate.
            </param>
            <param name="z">
            The Z coordinate.
            </param>
            <returns>
            A blip handle.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.AddBlipForEntity(System.Int32)">
            <summary>
            Returns red ( default ) blip attached to entity.
            Example:
            Blip blip; //Put this outside your case or option
            blip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);
            HUD::SET_BLIP_AS_FRIENDLY(blip, true);
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.AddPedDecorationFromHashes(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
            collection - PedDecorationCollection filename hash
            overlay - Item name hash
            Example:
            Entry inside "mpbeach_overlays.xml" -
            &lt;Item&gt;
            &lt;uvPos x="0.500000" y="0.500000" /&gt;
            &lt;scale x="0.600000" y="0.500000" /&gt;
            &lt;rotation value="0.000000" /&gt;
            &lt;nameHash&gt;FM_Hair_Fuzz&lt;/nameHash&gt;
            &lt;txdHash&gt;mp_hair_fuzz&lt;/txdHash&gt;
            &lt;txtHash&gt;mp_hair_fuzz&lt;/txtHash&gt;
            &lt;zone&gt;ZONE_HEAD&lt;/zone&gt;
            &lt;type&gt;TYPE_TATTOO&lt;/type&gt;
            &lt;faction&gt;FM&lt;/faction&gt;
            &lt;garment&gt;All&lt;/garment&gt;
            &lt;gender&gt;GENDER_DONTCARE&lt;/gender&gt;
            &lt;award /&gt;
            &lt;awardLevel /&gt;
            &lt;/Item&gt;
            Code:
            PED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.AddStateBagChangeHandler(System.String,System.String,CitizenFX.Core.Native.InputArgument)">
            <summary>
            Adds a handler for changes to a state bag.
            The function called expects to match the following signature:
            ```ts
            function StateBagChangeHandler(bagName: string, key: string, value: any, reserved: number, replicated: boolean);
            ```
            *   **bagName**: The internal bag ID for the state bag which changed. This is usually `player:Source`, `entity:NetID`
            or `localEntity:Handle`.
            *   **key**: The changed key.
            *   **value**: The new value stored at key. The old value is still stored in the state bag at the time this callback executes.
            *   **reserved**: Currently unused.
            *   **replicated**: Whether the set is meant to be replicated.
            At this time, the change handler can't opt to reject changes.
            </summary>
            <param name="keyFilter">
            The key to check for, or null.
            </param>
            <param name="bagFilter">
            The bag ID to check for, or null.
            </param>
            <param name="handler">
            The handler function.
            </param>
            <returns>
            A cookie to remove the change handler.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.ApplyForceToEntity(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies a force to the specified entity.
            **List of force types (p1)**:
            ```
            public enum ForceType
            {
            MinForce = 0,
            MaxForceRot = 1,
            MinForce2 = 2,
            MaxForceRot2 = 3,
            ForceNoRot = 4,
            ForceRotPlusForce = 5
            }
            ```
            Research/documentation on the gtaforums can be found [here](https://gtaforums.com/topic/885669-precisely-define-object-physics/) and [here](https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/).
            </summary>
            <param name="entity">
            The entity you want to apply a force on
            </param>
            <param name="forceType">
            See native description above for a list of commonly used values
            </param>
            <param name="x">
            Force amount (X)
            </param>
            <param name="y">
            Force amount (Y)
            </param>
            <param name="z">
            Force amount (Z)
            </param>
            <param name="offX">
            Rotation/offset force (X)
            </param>
            <param name="offY">
            Rotation/offset force (Y)
            </param>
            <param name="offZ">
            Rotation/offset force (Z)
            </param>
            <param name="boneIndex">
            (Often 0) Entity bone index
            </param>
            <param name="isDirectionRel">
            (Usually false) Vector defined in local (body-fixed) coordinate frame
            </param>
            <param name="ignoreUpVec">
            (Usually true)
            </param>
            <param name="isForceRel">
            (Usually true) When true, force gets multiplied with the objects mass and different objects will have the same acceleration
            </param>
            <param name="p12">
            (Usually false)
            </param>
            <param name="p13">
            (Usually true)
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.CanPlayerStartCommerceSession(System.String)">
            <summary>
            Returns whether or not the specified player has enough information to start a commerce session for.
            </summary>
            <param name="playerSrc">
            The player handle
            </param>
            <returns>
            True or false.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.CancelEvent">
            <summary>
            Cancels the currently executing event.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.ClearPedProp(System.Int32,System.Int32)">
            <summary>
            List of component/props ID
            gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.ClearPedTasksImmediately(System.Int32)">
            <summary>
            Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.ClearPlayerWantedLevel(System.String)">
            <summary>
            This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);
            PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.CreateObject(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model.
            This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
            </summary>
            <param name="modelHash">
            The model to spawn.
            </param>
            <param name="x">
            Spawn coordinate X component.
            </param>
            <param name="y">
            Spawn coordinate Y component.
            </param>
            <param name="z">
            Spawn coordinate Z component, 'ground level'.
            </param>
            <param name="isNetwork">
            Whether to create a network object for the object. If false, the object exists only locally.
            </param>
            <param name="netMissionEntity">
            Whether to register the object as pinned to the script host in the R\* network model.
            </param>
            <param name="doorFlag">
            False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode.
            </param>
            <returns>
            A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.CreateObjectNoOffset(System.UInt32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an object (prop) with the specified model centered at the specified position.
            This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
            </summary>
            <param name="modelHash">
            The model to spawn.
            </param>
            <param name="x">
            Spawn coordinate X component.
            </param>
            <param name="y">
            Spawn coordinate Y component.
            </param>
            <param name="z">
            Spawn coordinate Z component.
            </param>
            <param name="isNetwork">
            Whether to create a network object for the object. If false, the object exists only locally.
            </param>
            <param name="netMissionEntity">
            Whether to register the object as pinned to the script host in the R\* network model.
            </param>
            <param name="doorFlag">
            False to create a door archetype (archetype flag bit 26 set) as a door. Required to be set to true to create door models in network mode.
            </param>
            <returns>
            A script handle (fwScriptGuid index) for the object, or `0` if the object failed to be created.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.CreatePed(System.Int32,System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Creates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading.
            This ped will initially be owned by the creating script as a mission entity, and the model should be loaded already
            (e.g. using REQUEST_MODEL).
            </summary>
            <param name="pedType">
            Unused. Peds get set to CIVMALE/CIVFEMALE/etc. no matter the value specified.
            </param>
            <param name="modelHash">
            The model of ped to spawn.
            </param>
            <param name="x">
            Spawn coordinate X component.
            </param>
            <param name="y">
            Spawn coordinate Y component.
            </param>
            <param name="z">
            Spawn coordinate Z component.
            </param>
            <param name="heading">
            Heading to face towards, in degrees.
            </param>
            <param name="isNetwork">
            Whether to create a network object for the ped. If false, the ped exists only locally.
            </param>
            <param name="bScriptHostPed">
            Whether to register the ped as pinned to the script host in the R\* network model.
            </param>
            <returns>
            A script handle (fwScriptGuid index) for the ped, or `0` if the ped failed to be created.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.CreateVehicle(System.UInt32,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Creates a vehicle with the specified model at the specified position. This vehicle will initially be owned by the creating
            script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
            ```
            NativeDB Added Parameter 8: BOOL p7
            ```
            </summary>
            <param name="modelHash">
            The model of vehicle to spawn.
            </param>
            <param name="x">
            Spawn coordinate X component.
            </param>
            <param name="y">
            Spawn coordinate Y component.
            </param>
            <param name="z">
            Spawn coordinate Z component.
            </param>
            <param name="heading">
            Heading to face towards, in degrees.
            </param>
            <param name="isNetwork">
            Whether to create a network object for the vehicle. If false, the vehicle exists only locally.
            </param>
            <param name="netMissionEntity">
            Whether to register the vehicle as pinned to the script host in the R\* network model.
            </param>
            <returns>
            A script handle (fwScriptGuid index) for the vehicle, or `0` if the vehicle failed to be created.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.DeleteEntity(System.Int32)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">
            The entity to delete.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.DeleteResourceKvpNoSync(System.String)">
            <summary>
            Nonsynchronous [DELETE_RESOURCE_KVP](#\_0x7389B5DF) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
            </summary>
            <param name="key">
            The key to delete
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.DoesPlayerOwnSku(System.String,System.Int32)">
            <summary>
            Requests whether or not the player owns the specified SKU.
            </summary>
            <param name="playerSrc">
            The player handle
            </param>
            <param name="skuId">
            The ID of the SKU.
            </param>
            <returns>
            A boolean.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.DoesPlayerOwnSkuExt(System.String,System.Int32)">
            <summary>
            Requests whether or not the player owns the specified package.
            </summary>
            <param name="playerSrc">
            The player handle
            </param>
            <param name="skuId">
            The package ID on Tebex.
            </param>
            <returns>
            A boolean.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.EnsureEntityStateBag(System.Int32)">
            <summary>
            Internal function for ensuring an entity has a state bag.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.FlushResourceKvp">
            <summary>
            Nonsynchronous operations will not wait for a disk/filesystem flush before returning from a write or delete call. They will be much faster than their synchronous counterparts (e.g., bulk operations), however, a system crash may lose the data to some recent operations.
            This native ensures all `_NO_SYNC` operations are synchronized with the disk/filesystem.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.FreezeEntityPosition(System.Int32,System.Boolean)">
            <summary>
            Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.
            </summary>
            <param name="entity">
            The entity to freeze/unfreeze.
            </param>
            <param name="toggle">
            Freeze or unfreeze entity.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetAllObjects">
            <summary>
            Returns all object handles known to the server.
            The data returned adheres to the following layout:
            ```
            [127, 42, 13, 37]
            ```
            </summary>
            <returns>
            An object containing a list of object handles.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetAllPeds">
            <summary>
            Returns all peds handles known to the server.
            The data returned adheres to the following layout:
            ```
            [127, 42, 13, 37]
            ```
            </summary>
            <returns>
            An object containing a list of peds handles.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetAllVehicles">
            <summary>
            Returns all vehicle handles known to the server.
            The data returned adheres to the following layout:
            ```
            [127, 42, 13, 37]
            ```
            </summary>
            <returns>
            An object containing a list of vehicle handles.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetConsoleBuffer">
            <summary>
            Returns the current console output buffer.
            </summary>
            <returns>
            The most recent game console output, as a string.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetCurrentResourceName">
            <summary>
            Returns the name of the currently executing resource.
            </summary>
            <returns>
            The name of the resource.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetEntityAttachedTo(System.Int32)">
            <summary>
            Gets the entity that this entity is attached to.
            </summary>
            <param name="entity">
            The entity to check.
            </param>
            <returns>
            The attached entity handle. 0 returned if the entity is not attached.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetEntityCoords(System.Int32)">
            <summary>
            Gets the current coordinates for a specified entity. This native is used server side when using OneSync.
            See [GET_ENTITY_COORDS](#\_0x3FEF770D40960D5A) for client side.
            </summary>
            <param name="entity">
            The entity to get the coordinates from.
            </param>
            <returns>
            The current entity coordinates.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetEntityHealth(System.Int32)">
            <summary>
            Currently it only works with peds.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetEntityMaxHealth(System.Int32)">
            <summary>
            Currently it only works with peds.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetEntityPopulationType(System.Int32)">
            <summary>
            This native gets an entity's population type.
            </summary>
            <param name="entity">
            the entity to obtain the population type from
            </param>
            <returns>
            Returns the population type ID, defined by the below enumeration:```cpp
            enum ePopulationType
            {
            POPTYPE_UNKNOWN = 0,
            POPTYPE_RANDOM_PERMANENT,
            POPTYPE_RANDOM_PARKED,
            POPTYPE_RANDOM_PATROL,
            POPTYPE_RANDOM_SCENARIO,
            POPTYPE_RANDOM_AMBIENT,
            POPTYPE_PERMANENT,
            POPTYPE_MISSION,
            POPTYPE_REPLAY,
            POPTYPE_CACHE,
            POPTYPE_TOOL
            };
            ```
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetEntityRoutingBucket(System.Int32)">
            <summary>
            Gets the routing bucket for the specified entity.
            Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
            </summary>
            <param name="entity">
            The entity to get the routing bucket for.
            </param>
            <returns>
            The routing bucket ID.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetEntitySpeed(System.Int32)">
            <summary>
            Gets the current speed of the entity in meters per second.
            ```
            To convert to MPH: speed * 2.236936
            To convert to KPH: speed * 3.6
            ```
            </summary>
            <param name="entity">
            The entity to get the speed of
            </param>
            <returns>
            The speed of the entity in meters per second
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetGameBuildNumber">
            <summary>
            Returns the internal build number of the current game being executed.
            Possible values:
            *   FiveM
            *   1604
            *   2060
            *   2189
            *   2372
            *   2545
            *   RedM
            *   1311
            *   1355
            *   1436
            *   LibertyM
            *   43
            *   FXServer
            *   0
            </summary>
            <returns>
            The build number, or **0** if no build number is known.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetGameName">
            <summary>
            Returns the current game being executed.
            Possible values:
            | Return value | Meaning                        |
            | ------------ | ------------------------------ |
            | `fxserver`   | Server-side code ('Duplicity') |
            | `fivem`      | FiveM for GTA V                |
            | `libertym`   | LibertyM for GTA IV            |
            | `redm`       | RedM for Red Dead Redemption 2 |
            </summary>
            <returns>
            The game the script environment is running in.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetGameTimer">
            <summary>
            Gets the current game timer in milliseconds.
            </summary>
            <returns>
            The game time.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetHashKey(System.String)">
            <summary>
            This native converts the passed string to a hash.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetLandingGearState(System.Int32)">
            <summary>
            See the client-side [GET_LANDING_GEAR_STATE](#\_0x9B0F3DCA3DB0F4CD) native for a description of landing gear states.
            </summary>
            <param name="vehicle">
            The vehicle to check.
            </param>
            <returns>
            The current state of the vehicles landing gear.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetNumResourceMetadata(System.String,System.String)">
            <summary>
            Gets the amount of metadata values with the specified key existing in the specified resource's manifest.
            See also: [Resource manifest](https://docs.fivem.net/resources/manifest/)
            </summary>
            <param name="resourceName">
            The resource name.
            </param>
            <param name="metadataKey">
            The key to look up in the resource manifest.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPedScriptTaskCommand(System.Int32)">
            <summary>
            Gets the script task command currently assigned to the ped.
            </summary>
            <param name="ped">
            The target ped.
            </param>
            <returns>
            The script task command currently assigned to the ped. A value of 0x811E343C denotes no script task is assigned.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPedScriptTaskStage(System.Int32)">
            <summary>
            Gets the stage of the peds scripted task.
            </summary>
            <param name="ped">
            The target ped.
            </param>
            <returns>
            The stage of the ped's scripted task. A value of 3 denotes no script task is assigned.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPedSourceOfDamage(System.Int32)">
            <summary>
            Get the last entity that damaged the ped. This native is used server side when using OneSync.
            </summary>
            <param name="ped">
            The target ped
            </param>
            <returns>
            The entity id. Returns 0 if the ped has not been damaged recently.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPedSourceOfDeath(System.Int32)">
            <summary>
            Get the entity that killed the ped. This native is used server side when using OneSync.
            </summary>
            <param name="ped">
            The target ped
            </param>
            <returns>
            The entity id. Returns 0 if the ped has no killer.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPedSpecificTaskType(System.Int32,System.Int32)">
            <summary>
            Gets the type of a ped's specific task given an index of the CPedTaskSpecificDataNode nodes.
            A ped will typically have a task at index 0, if a ped has multiple tasks at once they will be in the order 0, 1, 2, etc.
            </summary>
            <param name="ped">
            The target ped.
            </param>
            <param name="index">
            A zero-based index with a maximum value of 7.
            </param>
            <returns>
            The type of the specific task.
            1604: A value of 530 denotes no script task is assigned or an invalid input was given.
            2060+: A value of 531 denotes no script task is assigned or an invalid input was given.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPlayerCameraRotation(System.String)">
            <summary>
            Gets the current camera rotation for a specified player. This native is used server side when using OneSync.
            </summary>
            <param name="playerSrc">
            The player handle.
            </param>
            <returns>
            The player's camera rotation. Values are in radians.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPlayerFakeWantedLevel(System.String)">
            <summary>
            Gets the current fake wanted level for a specified player. This native is used server side when using OneSync.
            </summary>
            <param name="playerSrc">
            The target player
            </param>
            <returns>
            The fake wanted level
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPlayerMeleeWeaponDamageModifier(System.String)">
            <summary>
            A getter for [SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER](#\_0x4A3DC7ECCC321032).
            </summary>
            <param name="playerId">
            The player index.
            </param>
            <returns>
            Returns player melee weapon damage modifier value.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPlayerRoutingBucket(System.String)">
            <summary>
            Gets the routing bucket for the specified player.
            Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
            </summary>
            <param name="playerSrc">
            The player to get the routing bucket for.
            </param>
            <returns>
            The routing bucket ID.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPlayerTimeInPursuit(System.String,System.Boolean)">
            <summary>
            Gets the amount of time player has spent evading the cops.
            Counter starts and increments only when cops are chasing the player.
            If the player is evading, the timer will pause.
            </summary>
            <param name="playerSrc">
            The target player
            </param>
            <param name="lastPursuit">
            False = CurrentPursuit, True = LastPursuit
            </param>
            <returns>
            Returns -1, if the player is not wanted or wasn't in pursuit before, depending on the lastPursuit parameter
            Returns 0, if lastPursuit == False and the player has a wanted level, but the pursuit has not started yet
            Otherwise, will return the milliseconds of the pursuit.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPlayerToken(System.String,System.Int32)">
            <summary>
            Gets a player's token. Tokens can be used to enhance banning logic, however are specific to a server.
            </summary>
            <param name="playerSrc">
            A player.
            </param>
            <param name="index">
            Index between 0 and GET_NUM_PLAYER_TOKENS.
            </param>
            <returns>
            A token value.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPlayerWantedCentrePosition(System.String)">
            <summary>
            Gets the current known coordinates for the specified player from cops perspective. This native is used server side when using OneSync.
            </summary>
            <param name="playerSrc">
            The target player
            </param>
            <returns>
            The player's position known by police. Vector zero if the player has no wanted level.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPlayerWantedLevel(System.String)">
            <summary>
            Returns given players wanted level server-side.
            </summary>
            <param name="playerSrc">
            The target player
            </param>
            <returns>
            The wanted level
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPlayerWeaponDamageModifier(System.String)">
            <summary>
            A getter for [SET_PLAYER_WEAPON_DAMAGE_MODIFIER](#\_0xCE07B9F7817AADA3).
            </summary>
            <param name="playerId">
            The player index.
            </param>
            <returns>
            The value of player weapon damage modifier.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPlayerWeaponDefenseModifier(System.String)">
            <summary>
            A getter for [SET_PLAYER_WEAPON_DEFENSE_MODIFIER](#\_0x2D83BC011CA14A3C).
            </summary>
            <param name="playerId">
            The player index.
            </param>
            <returns>
            The value of player weapon defense modifier.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetPlayerWeaponDefenseModifier_2(System.String)">
            <summary>
            A getter for [\_SET_PLAYER_WEAPON_DEFENSE_MODIFIER\_2](#\_0xBCFDE9EDE4CF27DC).
            </summary>
            <param name="playerId">
            The player index.
            </param>
            <returns>
            The value of player weapon defense modifier 2.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetRegisteredCommands">
            <summary>
            Returns all commands that are registered in the command system.
            The data returned adheres to the following layout:
            ```
            [
            {
            "name": "cmdlist"
            },
            {
            "name": "command1"
            }
            ]
            ```
            </summary>
            <returns>
            An object containing registered commands.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetResourceKvpFloat(System.String)">
            <summary>
            A getter for [SET_RESOURCE_KVP_FLOAT](#\_0x9ADD2938).
            </summary>
            <param name="key">
            The key to fetch
            </param>
            <returns>
            A float that contains the value stored in the Kvp or nil/null if none.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetResourceKvpInt(System.String)">
            <summary>
            A getter for [SET_RESOURCE_KVP_INT](#\_0x6A2B1E8).
            </summary>
            <param name="key">
            The key to fetch
            </param>
            <returns>
            A int that contains the value stored in the Kvp or nil/null if none.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetResourceKvpString(System.String)">
            <summary>
            A getter for [SET_RESOURCE_KVP](#\_0x21C7A35B).
            </summary>
            <param name="key">
            The key to fetch
            </param>
            <returns>
            A string that contains the value stored in the Kvp or nil/null if none.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetResourceMetadata(System.String,System.String,System.Int32)">
            <summary>
            Gets the metadata value at a specified key/index from a resource's manifest.
            See also: [Resource manifest](https://docs.fivem.net/resources/manifest/)
            </summary>
            <param name="resourceName">
            The resource name.
            </param>
            <param name="metadataKey">
            The key in the resource manifest.
            </param>
            <param name="index">
            The value index, in a range from \[0..GET_NUM_RESOURCE_METDATA-1].
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetResourcePath(System.String)">
            <summary>
            Returns the physical on-disk path of the specified resource.
            </summary>
            <param name="resourceName">
            The name of the resource.
            </param>
            <returns>
            The resource directory name, possibly without trailing slash.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetResourceState(System.String)">
            <summary>
            Returns the current state of the specified resource.
            </summary>
            <param name="resourceName">
            The name of the resource.
            </param>
            <returns>
            The resource state. One of `"missing", "started", "starting", "stopped", "stopping", "uninitialized" or "unknown"`.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetSelectedPedWeapon(System.Int32)">
            <summary>
            Returns a hash of selected ped weapon.
            </summary>
            <param name="ped">
            The target ped.
            </param>
            <returns>
            The weapon hash.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetStateBagValue(System.String,System.String)">
            <summary>
            Returns the value of a state bag key.
            </summary>
            <returns>
            Value.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetVehicleDoorLockStatus(System.Int32)">
            <summary>
            enum VehicleLockStatus = {
            None = 0,
            Unlocked = 1,
            Locked = 2,
            LockedForPlayer = 3,
            StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.
            CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1
            CanBeBrokenIntoPersist = 8, -- Can be broken into persist
            CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).
            }
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetVehicleDoorsLockedForPlayer(System.Int32)">
            <summary>
            Currently it only works when set to "all players".
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetVehicleFlightNozzlePosition(System.Int32)">
            <summary>
            Gets the flight nozzel position for the specified vehicle. See the client-side [\_GET_VEHICLE_FLIGHT_NOZZLE_POSITION](#\_0xDA62027C8BDB326E) native for usage examples.
            </summary>
            <param name="vehicle">
            The vehicle to check.
            </param>
            <returns>
            The flight nozzel position between 0.0 (flying normally) and 1.0 (VTOL mode)
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetVehicleHomingLockonState(System.Int32)">
            <summary>
            Gets the lock on state for the specified vehicle. See the client-side [GET_VEHICLE_HOMING_LOCKON_STATE](#\_0xE6B0E8CFC3633BF0) native for a description of lock on states.
            </summary>
            <param name="vehicle">
            The vehicle to check.
            </param>
            <returns>
            The lock on state.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetVehicleLockOnTarget(System.Int32)">
            <summary>
            Gets the vehicle that is locked on to for the specified vehicle.
            </summary>
            <param name="vehicle">
            The vehicle to check.
            </param>
            <returns>
            The vehicle that is locked on. 0 returned if no vehicle is locked on.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetVehiclePedIsIn(System.Int32,System.Boolean)">
            <summary>
            Gets the vehicle the specified Ped is/was in depending on bool value. This native is used server side when using OneSync.
            </summary>
            <param name="ped">
            The target ped
            </param>
            <param name="lastVehicle">
            False = CurrentVehicle, True = LastVehicle
            </param>
            <returns>
            The vehicle id. Returns 0 if the ped is/was not in a vehicle.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.GetVehicleType(System.Int32)">
            <summary>
            Returns the type of the passed vehicle.
            ### Vehicle types
            *   automobile
            *   bike
            *   boat
            *   heli
            *   plane
            *   submarine
            *   trailer
            *   train
            </summary>
            <param name="vehicle">
            The vehicle's entity handle.
            </param>
            <returns>
            If the entity is a vehicle, the vehicle type. If it is not a vehicle, the return value will be null.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.IsDuplicityVersion">
            <summary>
            Gets whether or not this is the CitizenFX server.
            </summary>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.IsEntityVisible(System.Int32)">
            <summary>
            This native checks if the given entity is visible.
            </summary>
            <returns>
            Returns `true` if the entity is visible, `false` otherwise.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.IsPedAPlayer(System.Int32)">
            <summary>
            This native checks if the given ped is a player.
            </summary>
            <returns>
            Returns `true` if the ped is a player, `false` otherwise.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.IsPlayerCommerceInfoLoaded(System.String)">
            <summary>
            Requests whether or not the commerce data for the specified player has loaded.
            </summary>
            <param name="playerSrc">
            The player handle
            </param>
            <returns>
            A boolean.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.IsPlayerCommerceInfoLoadedExt(System.String)">
            <summary>
            Requests whether or not the commerce data for the specified player has loaded from Tebex.
            </summary>
            <param name="playerSrc">
            The player handle
            </param>
            <returns>
            A boolean.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.IsPlayerEvadingWantedLevel(System.String)">
            <summary>
            This will return true if the player is evading wanted level, meaning that the wanted level stars are blink.
            Otherwise will return false.
            If the player is not wanted, it simply returns false.
            </summary>
            <param name="playerSrc">
            The target player
            </param>
            <returns>
            boolean value, depending if the player is evading his wanted level or not.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.LoadPlayerCommerceData(System.String)">
            <summary>
            Requests the commerce data for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded.
            </summary>
            <param name="playerSrc">
            The player handle
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.LoadPlayerCommerceDataExt(System.String)">
            <summary>
            Requests the commerce data from Tebex for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded.
            </summary>
            <param name="playerSrc">
            The player handle
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.LoadResourceFile(System.String,System.String)">
            <summary>
            Reads the contents of a text file in a specified resource.
            If executed on the client, this file has to be included in `files` in the resource manifest.
            Example: `local data = LoadResourceFile("devtools", "data.json")`
            </summary>
            <param name="resourceName">
            The resource name.
            </param>
            <param name="fileName">
            The file in the resource.
            </param>
            <returns>
            The file contents
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.MumbleCreateChannel(System.Int32)">
            <summary>
            Create a permanent voice channel.
            </summary>
            <param name="id">
            ID of the channel.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.MumbleIsPlayerMuted(System.Int32)">
            <summary>
            Checks if the player is currently muted
            </summary>
            <param name="playerSrc">
            The player to get the mute state for
            </param>
            <returns>
            Whether or not the player is muted
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.MumbleSetPlayerMuted(System.Int32,System.Boolean)">
            <summary>
            Mutes or unmutes the specified player
            </summary>
            <param name="playerSrc">
            The player to set the mute state of
            </param>
            <param name="toggle">
            Whether to mute or unmute the player
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.NetworkGetEntityOwner(System.Int32)">
            <summary>
            Returns the owner ID of the specified entity.
            </summary>
            <param name="entity">
            The entity to get the owner for.
            </param>
            <returns>
            On the server, the server ID of the entity owner. On the client, returns the player/slot ID of the entity owner.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.NetworkGetFirstEntityOwner(System.Int32)">
            <summary>
            Returns the first owner ID of the specified entity.
            </summary>
            <param name="entity">
            The entity to get the first owner for.
            </param>
            <returns>
            The server ID of the first entity owner.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.PrintStructuredTrace(System.String)">
            <summary>
            Prints 'structured trace' data to the server `file descriptor 3` channel. This is not generally useful outside of
            server monitoring utilities.
            </summary>
            <param name="jsonString">
            JSON data to submit as `payload` in the `script_structured_trace` event.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.ProfilerEnterScope(System.String)">
            <summary>
            Scope entry for profiler.
            </summary>
            <param name="scopeName">
            Scope name.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.ProfilerExitScope">
            <summary>
            Scope exit for profiler.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.ProfilerIsRecording">
            <summary>
            Returns true if the profiler is active.
            </summary>
            <returns>
            True or false.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.RegisterCommand(System.String,CitizenFX.Core.Native.InputArgument,System.Boolean)">
            <summary>
            Registered commands can be executed by entering them in the client console (this works for client side and server side registered commands). Or by entering them in the server console/through an RCON client (only works for server side registered commands). Or if you use a supported chat resource, like the default one provided in the cfx-server-data repository, then you can enter the command in chat by prefixing it with a `/`.
            Commands registered using this function can also be executed by resources, using the [`ExecuteCommand` native](#\_0x561C060B).
            The restricted bool is not used on the client side. Permissions can only be checked on the server side, so if you want to limit your command with an ace permission automatically, make it a server command (by registering it in a server script).
            **Example result**:
            ![](https://i.imgur.com/TaCnG09.png)
            </summary>
            <param name="commandName">
            The command you want to register.
            </param>
            <param name="handler">
            A handler function that gets called whenever the command is executed.
            </param>
            <param name="restricted">
            If this is a server command and you set this to true, then players will need the command.yourCommandName ace permission to execute this command.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.RegisterConsoleListener(CitizenFX.Core.Native.InputArgument)">
            <summary>
            Registers a listener for console output messages.
            </summary>
            <param name="listener">
            A function of `(channel: string, message: string) =&gt; void`. The message might contain `\n`.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.RegisterResourceAsEventHandler(System.String)">
            <summary>
            An internal function which allows the current resource's HLL script runtimes to receive state for the specified event.
            </summary>
            <param name="eventName">
            An event name, or "\*" to disable HLL event filtering for this resource.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.RegisterResourceAsset(System.String,System.String)">
            <summary>
            **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
            Registers a cached resource asset with the resource system, similar to the automatic scanning of the `stream/` folder.
            </summary>
            <param name="resourceName">
            The resource to add the asset to.
            </param>
            <param name="fileName">
            A file name in the resource.
            </param>
            <returns>
            A cache string to pass to `REGISTER_STREAMING_FILE_FROM_CACHE` on the client.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.RegisterResourceBuildTaskFactory(System.String,CitizenFX.Core.Native.InputArgument)">
            <summary>
            Registers a build task factory for resources.
            The function should return an object (msgpack map) with the following fields:
            ```
            {
            // returns whether the specific resource should be built
            shouldBuild = func(resourceName: string): bool,
            // asynchronously start building the specific resource.
            // call cb when completed
            build = func(resourceName: string, cb: func(success: bool, status: string): void): void
            }
            ```
            </summary>
            <param name="factoryId">
            The identifier for the build task.
            </param>
            <param name="factoryFn">
            The factory function.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.RemoveAllPedWeapons(System.Int32,System.Boolean)">
            <summary>
            setting the last params to false it does that same so I would suggest its not a toggle
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.RemoveBlip(System.Int32@)">
            <summary>
            In the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.
            E.g.:
            Ped pped = PLAYER::PLAYER_PED_ID();
            Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);
            Blip b = HUD::ADD_BLIP_FOR_ENTITY(v);
            works fine.
            But later attempting to delete it with:
            Blip b = HUD::GET_BLIP_FROM_ENTITY(v);
            if (HUD::DOES_BLIP_EXIST(b)) HUD::REMOVE_BLIP(&amp;b);
            doesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).
            Thus for me, HUD::REMOVE_BLIP(&amp;b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.
            -------------
            Passing the address of the variable instead of the value works for me.
            e.g.
            int blip = HUD::ADD_BLIP_FOR_ENTITY(ped);
            HUD::REMOVE_BLIP(&amp;blip);
            Remove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'.
            --
            It crashes my game.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.RemoveStateBagChangeHandler(System.Int32)">
            <summary>
            **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
            Removes a handler for changes to a state bag.
            </summary>
            <param name="cookie">
            The cookie.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.RemoveWeaponFromPed(System.Int32,System.UInt32)">
            <summary>
            This native removes a specified weapon from your selected ped.
            Weapon Hashes: pastebin.com/0wwDZgkF
            Example:
            C#:
            Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);
            C++:
            WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);
            The code above removes the knife from the player.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.RequestPlayerCommerceSession(System.String,System.Int32)">
            <summary>
            Requests the specified player to buy the passed SKU. This'll pop up a prompt on the client, which upon acceptance
            will open the browser prompting further purchase details.
            </summary>
            <param name="playerSrc">
            The player handle
            </param>
            <param name="skuId">
            The ID of the SKU.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SaveResourceFile(System.String,System.String,System.String,System.Int32)">
            <summary>
            Writes the specified data to a file in the specified resource.
            Using a length of `-1` will automatically detect the length assuming the data is a C string.
            </summary>
            <param name="resourceName">
            The name of the resource.
            </param>
            <param name="fileName">
            The name of the file.
            </param>
            <param name="data">
            The data to write to the file.
            </param>
            <param name="dataLength">
            The length of the written data.
            </param>
            <returns>
            A value indicating if the write succeeded.
            </returns>
        </member>
        <member name="M:CitizenFX.Core.Native.API.ScheduleResourceTick(System.String)">
            <summary>
            Schedules the specified resource to run a tick as soon as possible, bypassing the server's fixed tick rate.
            </summary>
            <param name="resourceName">
            The resource to tick.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetBlipSprite(System.Int32,System.Int32)">
            <summary>
            &lt;!--
            _loc1_.map((name, idx) =&gt; `| ${idx} | ${name} | ![${name}](https://runtime.fivem.net/blips/${name}.svg) |`).join('\n')
            --&gt;
            Sets the displayed sprite for a specific blip.
            There's a [list of sprites](https://docs.fivem.net/game-references/blips/) on the FiveM documentation site.
            </summary>
            <param name="blip">
            The blip to change.
            </param>
            <param name="spriteId">
            The sprite ID to set.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetEntityCoords(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis.
            </summary>
            <param name="entity">
            The entity to change coordinates for.
            </param>
            <param name="xPos">
            The X coordinate.
            </param>
            <param name="yPos">
            The Y coordinate.
            </param>
            <param name="zPos">
            The Z coordinate, ground level.
            </param>
            <param name="alive">
            Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive.
            </param>
            <param name="deadFlag">
            Whether to disable physics for dead peds, too, and not just living peds.
            </param>
            <param name="ragdollFlag">
            A special flag used for ragdolling peds.
            </param>
            <param name="clearArea">
            Whether to clear any entities in the target area.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetEntityDistanceCullingRadius(System.Int32,System.Single)">
            <summary>
            It overrides the default distance culling radius of an entity. Set to `0.0` to reset.
            If you want to interact with an entity outside of your players' scopes set the radius to a huge number.
            </summary>
            <param name="entity">
            The entity handle to override the distance culling radius.
            </param>
            <param name="radius">
            The new distance culling radius.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetEntityHeading(System.Int32,System.Single)">
            <summary>
            Set the heading of an entity in degrees also known as "Yaw".
            </summary>
            <param name="entity">
            The entity to set the heading for.
            </param>
            <param name="heading">
            The heading in degrees.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetEntityRoutingBucket(System.Int32,System.Int32)">
            <summary>
            Sets the routing bucket for the specified entity.
            Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
            </summary>
            <param name="entity">
            The entity to set the routing bucket for.
            </param>
            <param name="bucket">
            The bucket ID.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetEntityVelocity(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedAmmo(System.Int32,System.UInt32,System.Int32)">
            <summary>
            NativeDB Added Parameter 4: BOOL p3
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedArmour(System.Int32,System.Int32)">
            <summary>
            Sets the armor of the specified ped.
            ped: The Ped to set the armor of.
            amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedComponentVariation(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model.
            ### MP Freemode list of components
            **0**: Face\
            **1**: Mask\
            **2**: Hair\
            **3**: Torso\
            **4**: Leg\
            **5**: Parachute / bag\
            **6**: Shoes\
            **7**: Accessory\
            **8**: Undershirt\
            **9**: Kevlar\
            **10**: Badge\
            **11**: Torso 2
            ### Related and useful natives
            [GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS](#\_0x27561561732A7842)\
            [GET_NUMBER_OF_PED_TEXTURE_VARIATIONS](#\_0x8F7156A3142A6BAD)
            [List of component/props ID](gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html) of player_two with examples
            </summary>
            <param name="ped">
            The ped handle.
            </param>
            <param name="componentId">
            The component that you want to set.
            </param>
            <param name="drawableId">
            The drawable id that is going to be set.
            </param>
            <param name="textureId">
            The texture id of the drawable.
            </param>
            <param name="paletteId">
            0 to 3.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedConfigFlag(System.Int32,System.Int32,System.Boolean)">
            <summary>
            cpp
            // Potential names and hash collisions included as comments
            enum ePedConfigFlags {
            _0x67D1A445 = 0,
            _0xC63DE95E = 1,
            CPED_CONFIG_FLAG_NoCriticalHits = 2,
            CPED_CONFIG_FLAG_DrownsInWater = 3,
            CPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,
            _0x37D196F4 = 5,
            _0xE2462399 = 6,
            CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,
            _0xEDDEB838 = 8,
            _0xB398B6FD = 9,
            _0xF6664E68 = 10,
            _0xA05E7CA3 = 11,
            _0xCE394045 = 12,
            CPED_CONFIG_FLAG_NeverLeavesGroup = 13,
            _0xCD8D1411 = 14,
            _0xB031F1A9 = 15,
            _0xFE65BEE3 = 16,
            CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,
            _0x380165BD = 18,
            _0x07C045C7 = 19,
            _0x583B5E2D = 20,
            _0x475EDA58 = 21,
            _0x8629D05B = 22,
            _0x1522968B = 23,
            CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,
            _0x4CC09C4B = 25,
            _0x034F3053 = 26,
            _0xD91BA7CC = 27,
            _0x5C8DC66E = 28,
            _0x8902EAA0 = 29,
            _0x6580B9D2 = 30,
            _0x0EF7A297 = 31,
            _0x6BF86E5B = 32,
            CPED_CONFIG_FLAG_DieWhenRagdoll = 33,
            CPED_CONFIG_FLAG_HasHelmet = 34,
            CPED_CONFIG_FLAG_UseHelmet = 35,
            _0xEEB3D630 = 36,
            _0xB130D17B = 37,
            _0x5F071200 = 38,
            CPED_CONFIG_FLAG_DisableEvasiveDives = 39,
            _0xC287AAFF = 40,
            _0x203328CC = 41,
            CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,
            CPED_CONFIG_FLAG_DisablePlayerLockon = 43,
            CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,
            _0xEC4A8ACF = 45,
            _0xDB115BFA = 46,
            CPED_CONFIG_FLAG_PedBeingDeleted = 47,
            CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,
            _0xF8E99565 = 49,
            _0xDD17FEE6 = 50,
            _0x7ED9B2C9 = 51,
            _0x655E8618 = 52,
            _0x5A6C1F6E = 53,
            _0xD749FC41 = 54,
            _0x357F63F3 = 55,
            _0xC5E60961 = 56,
            _0x29275C3E = 57,
            CPED_CONFIG_FLAG_IsFiring = 58,
            CPED_CONFIG_FLAG_WasFiring = 59,
            CPED_CONFIG_FLAG_IsStanding = 60,
            CPED_CONFIG_FLAG_WasStanding = 61,
            CPED_CONFIG_FLAG_InVehicle = 62,
            CPED_CONFIG_FLAG_OnMount = 63,
            CPED_CONFIG_FLAG_AttachedToVehicle = 64,
            CPED_CONFIG_FLAG_IsSwimming = 65,
            CPED_CONFIG_FLAG_WasSwimming = 66,
            CPED_CONFIG_FLAG_IsSkiing = 67,
            CPED_CONFIG_FLAG_IsSitting = 68,
            CPED_CONFIG_FLAG_KilledByStealth = 69,
            CPED_CONFIG_FLAG_KilledByTakedown = 70,
            CPED_CONFIG_FLAG_Knockedout = 71,
            _0x3E3C4560 = 72,
            _0x2994C7B7 = 73,
            _0x6D59D275 = 74,
            CPED_CONFIG_FLAG_UsingCoverPoint = 75,
            CPED_CONFIG_FLAG_IsInTheAir = 76,
            _0x2D493FB7 = 77,
            CPED_CONFIG_FLAG_IsAimingGun = 78,
            _0x14D69875 = 79,
            _0x40B05311 = 80,
            _0x8B230BC5 = 81,
            _0xC74E5842 = 82,
            _0x9EA86147 = 83,
            _0x674C746C = 84,
            _0x3E56A8C2 = 85,
            _0xC144A1EF = 86,
            _0x0548512D = 87,
            _0x31C93909 = 88,
            _0xA0269315 = 89,
            _0xD4D59D4D = 90,
            _0x411D4420 = 91,
            _0xDF4AEF0D = 92,
            CPED_CONFIG_FLAG_ForcePedLoadCover = 93,
            _0x300E4CD3 = 94,
            _0xF1C5BF04 = 95,
            _0x89C2EF13 = 96,
            CPED_CONFIG_FLAG_VaultFromCover = 97,
            _0x02A852C8 = 98,
            _0x3D9407F1 = 99,
            _0x319B4558 = 100,
            CPED_CONFIG_FLAG_ForcedAim = 101,
            _0xB942D71A = 102,
            _0xD26C55A8 = 103,
            _0xB89E703B = 104,
            CPED_CONFIG_FLAG_ForceReload = 105,
            _0xD9E73DA2 = 106,
            _0xFF71DC2C = 107,
            _0x1E27E8D8 = 108,
            _0xF2C53966 = 109,
            _0xC4DBE247 = 110,
            _0x83C0A4BF = 111,
            _0x0E0FAF8C = 112,
            _0x26616660 = 113,
            _0x43B80B79 = 114,
            _0x0D2A9309 = 115,
            _0x12C1C983 = 116,
            CPED_CONFIG_FLAG_BumpedByPlayer = 117,
            _0xE586D504 = 118,
            _0x52374204 = 119,
            CPED_CONFIG_FLAG_IsHandCuffed = 120,
            CPED_CONFIG_FLAG_IsAnkleCuffed = 121,
            CPED_CONFIG_FLAG_DisableMelee = 122,
            _0xFE714397 = 123,
            _0xB3E660BD = 124,
            _0x5FED6BFD = 125,
            _0xC9D6F66F = 126,
            _0x519BC986 = 127,
            CPED_CONFIG_FLAG_CanBeAgitated = 128,
            _0x9A4B617C = 129, // CPED_CONFIG_FLAG_FaceDirInsult
            _0xDAB70E9F = 130,
            _0xE569438A = 131,
            _0xBBC77D6D = 132,
            _0xCB59EF0F = 133,
            _0x8C5EA971 = 134,
            CPED_CONFIG_FLAG_IsScuba = 135,
            CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
            _0xDCE59B58 = 137,
            CPED_CONFIG_FLAG_RidingTrain = 138,
            CPED_CONFIG_FLAG_ArrestResult = 139,
            CPED_CONFIG_FLAG_CanAttackFriendly = 140,
            _0x98A4BE43 = 141,
            _0x6901E731 = 142,
            _0x9EC9BF6C = 143,
            _0x42841A8F = 144,
            CPED_CONFIG_FLAG_ShootingAnimFlag = 145,
            CPED_CONFIG_FLAG_DisableLadderClimbing = 146,
            CPED_CONFIG_FLAG_StairsDetected = 147,
            CPED_CONFIG_FLAG_SlopeDetected = 148,
            _0x1A15670B = 149,
            _0x61786EE5 = 150,
            _0xCB9186BD = 151,
            _0xF0710152 = 152,
            _0x43DFE310 = 153,
            _0xC43C624E = 154,
            CPED_CONFIG_FLAG_CanPerformArrest = 155,
            CPED_CONFIG_FLAG_CanPerformUncuff = 156,
            CPED_CONFIG_FLAG_CanBeArrested = 157,
            _0xF7960FF5 = 158,
            _0x59564113 = 159,
            _0x0C6C3099 = 160,
            _0x645F927A = 161,
            _0xA86549B9 = 162,
            _0x8AAF337A = 163,
            _0x13BAA6E7 = 164,
            _0x5FB9D1F5 = 165,
            CPED_CONFIG_FLAG_IsInjured = 166,
            _0x6398A20B = 167,
            _0xD8072639 = 168,
            _0xA05B1845 = 169,
            _0x83F6D220 = 170,
            _0xD8430331 = 171,
            _0x4B547520 = 172,
            _0xE66E1406 = 173,
            _0x1C4BFE0C = 174,
            _0x90008BFA = 175,
            _0x07C7A910 = 176,
            _0xF15F8191 = 177,
            _0xCE4E8BE2 = 178,
            _0x1D46E4F2 = 179,
            CPED_CONFIG_FLAG_IsInCustody = 180,
            _0xE4FD9B3A = 181,
            _0x67AE0812 = 182,
            CPED_CONFIG_FLAG_IsAgitated = 183,
            CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,
            _0x7B2D325E = 185,
            CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,
            CPED_CONFIG_FLAG_HasHurtStarted = 187,
            CPED_CONFIG_FLAG_DisableHurt = 188,
            CPED_CONFIG_FLAG_PlayerIsWeird = 189,
            _0x32FC208B = 190,
            _0x0C296E5A = 191,
            _0xE63B73EC = 192,
            _0x04E9CC80 = 193,
            CPED_CONFIG_FLAG_UsingScenario = 194,
            CPED_CONFIG_FLAG_VisibleOnScreen = 195,
            _0xD88C58A1 = 196,
            _0x5A3DCF43 = 197, // CPED_CONFIG_FLAG_AvoidUnderSide
            _0xEA02B420 = 198,
            _0x3F559CFF = 199,
            _0x8C55D029 = 200,
            _0x5E6466F6 = 201,
            _0xEB5AD706 = 202,
            _0x0EDDDDE7 = 203,
            _0xA64F7B1D = 204,
            _0x48532CBA = 205,
            _0xAA25A9E7 = 206,
            _0x415B26B9 = 207,
            CPED_CONFIG_FLAG_DisableExplosionReactions = 208,
            CPED_CONFIG_FLAG_DodgedPlayer = 209,
            _0x67405504 = 210,
            _0x75DDD68C = 211,
            _0x2AD879B4 = 212,
            _0x51486F91 = 213,
            _0x32F79E21 = 214,
            _0xBF099213 = 215,
            _0x054AC8E2 = 216,
            _0x14E495CC = 217,
            _0x3C7DF9DF = 218,
            _0x848FFEF2 = 219,
            CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,
            _0x2618E1CF = 221,
            _0x84F722FA = 222,
            _0xD1B87B1F = 223,
            _0x728AA918 = 224,
            CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
            CPED_CONFIG_FLAG_DisablePedAvoidance = 226,
            _0x59E91185 = 227,
            _0x1EA7225F = 228,
            CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,
            _0x6DCA7D88 = 230,
            _0xFC3E572D = 231,
            _0x08E9F9CF = 232,
            _0x2D3BA52D = 233,
            _0xFD2F53EA = 234,
            _0x31A1B03B = 235,
            CPED_CONFIG_FLAG_IsHoldingProp = 236,
            _0x82ED0A66 = 237, // CPED_CONFIG_FLAG_BlocksPathingWhenDead
            _0xCE57C9A3 = 238,
            _0x26149198 = 239,
            _0x1B33B598 = 240,
            _0x719B6E87 = 241,
            _0x13E8E8E8 = 242,
            _0xF29739AE = 243,
            _0xABEA8A74 = 244,
            _0xB60EA2BA = 245,
            _0x536B0950 = 246,
            _0x0C754ACA = 247,
            _0x69D28F3E = 248,
            _0x12659168 = 249,
            _0x1BDF2F04 = 250,
            _0x7728FAA3 = 251,
            _0x6A807ED8 = 252,
            CPED_CONFIG_FLAG_OnStairs = 253,
            _0xE1A2F73F = 254,
            _0x5B3697C8 = 255,
            _0xF1EB20A9 = 256,
            _0x8B7DF407 = 257,
            _0x329DCF1A = 258,
            _0x8D90DD1B = 259,
            _0xB8A292B7 = 260,
            _0x8374B087 = 261,
            _0x2AF558F0 = 262,
            _0x82251455 = 263,
            _0x30CF498B = 264,
            _0xE1CD50AF = 265,
            _0x72E4AE48 = 266,
            _0xC2657EA1 = 267,
            _0x29FF6030 = 268,
            _0x8248A5EC = 269,
            CPED_CONFIG_FLAG_OnStairSlope = 270,
            _0xA0897933 = 271,
            CPED_CONFIG_FLAG_DontBlipCop = 272,
            CPED_CONFIG_FLAG_ClimbedShiftedFence = 273,
            _0xF7823618 = 274,
            _0xDC305CCE = 275, // CPED_CONFIG_FLAG_KillWhenTrapped
            CPED_CONFIG_FLAG_EdgeDetected = 276,
            _0x92B67896 = 277,
            _0xCAD677C9 = 278,
            CPED_CONFIG_FLAG_AvoidTearGas = 279,
            _0x5276AC7B = 280,
            _0x1032692A = 281,
            _0xDA23E7F1 = 282,
            _0x9139724D = 283,
            _0xA1457461 = 284,
            _0x4186E095 = 285,
            _0xAC68E2EB = 286,
            CPED_CONFIG_FLAG_RagdollingOnBoat = 287,
            CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
            _0x1B9EE8A1 = 289,
            _0xF3F5758C = 290,
            _0x2A9307F1 = 291,
            _0x7403D216 = 292,
            _0xA06A3C6C = 293,
            CPED_CONFIG_FLAG_DisableShockingEvents = 294,
            _0xF8DA25A5 = 295,
            _0x7EF55802 = 296,
            _0xB31F1187 = 297,
            _0x84315402 = 298,
            _0x0FD69867 = 299,
            _0xC7829B67 = 300,
            CPED_CONFIG_FLAG_DisablePedConstraints = 301,
            _0x6D23CF25 = 302,
            _0x2ADA871B = 303,
            _0x47BC8A58 = 304,
            _0xEB692FA5 = 305,
            _0x4A133C50 = 306,
            _0xC58099C3 = 307,
            _0xF3D76D41 = 308,
            _0xB0EEE9F2 = 309,
            CPED_CONFIG_FLAG_IsInCluster = 310,
            _0x0FA153EF = 311,
            _0xD73F5CD3 = 312,
            _0xD4136C22 = 313,
            _0xE404CA6B = 314,
            _0xB9597446 = 315,
            _0xD5C98277 = 316,
            _0xD5060A9C = 317,
            _0x3E5F1CBB = 318,
            _0xD8BE1D54 = 319,
            _0x0B1F191F = 320,
            _0xC995167A = 321,
            CPED_CONFIG_FLAG_HasHighHeels = 322,
            _0x86B01E54 = 323,
            _0x3A56FE15 = 324,
            _0xC03B736C = 325, // CPED_CONFIG_FLAG_SpawnedAtScenario
            _0xBBF47729 = 326,
            _0x22B668A8 = 327,
            _0x2624D4D4 = 328,
            CPED_CONFIG_FLAG_DisableTalkTo = 329,
            CPED_CONFIG_FLAG_DontBlip = 330,
            CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
            _0x630F55F3 = 332,
            _0x150468FD = 333,
            _0x914EBD6B = 334,
            _0x79AF3B6D = 335,
            _0x75C7A632 = 336,
            _0x52D530E2 = 337,
            _0xDB2A90E0 = 338,
            _0x5922763D = 339,
            _0x12ADB567 = 340,
            _0x105C8518 = 341,
            _0x106F703D = 342,
            _0xED152C3E = 343,
            _0xA0EFE6A8 = 344,
            _0xBF348C82 = 345,
            _0xCDDFE830 = 346,
            _0x7B59BD9B = 347,
            _0x0124C788 = 348,
            CPED_CONFIG_FLAG_EquipJetpack = 349,
            _0x08D361A5 = 350,
            _0xE13D1F7C = 351,
            _0x40E25FB9 = 352,
            _0x930629D9 = 353,
            _0xECCF0C7F = 354,
            _0xB6E9613B = 355,
            _0x490C0478 = 356,
            _0xE8865BEA = 357,
            _0xF3C34A29 = 358,
            CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,
            _0xF660E115 = 360,
            _0xAB0E6DED = 361,
            CPED_CONFIG_FLAG_HasReserveParachute = 362,
            CPED_CONFIG_FLAG_UseReserveParachute = 363,
            _0x5C5D9CD3 = 364,
            _0x8F7701F3 = 365,
            _0xBC4436AD = 366,
            _0xD7E07D37 = 367,
            _0x03C4FD24 = 368,
            _0x7675789A = 369,
            _0xB7288A88 = 370,
            _0xC06B6291 = 371,
            _0x95A4A805 = 372,
            _0xA8E9A042 = 373,
            CPED_CONFIG_FLAG_NeverLeaveTrain = 374,
            _0xBAC674B3 = 375,
            _0x147F1FFB = 376,
            _0x4376DD79 = 377,
            _0xCD3DB518 = 378,
            _0xFE4BA4B6 = 379,
            _0x5DF03A55 = 380,
            _0xBCD816CD = 381,
            _0xCF02DD69 = 382,
            _0xF73AFA2E = 383,
            _0x80B9A9D0 = 384,
            _0xF601F7EE = 385,
            _0xA91350FC = 386,
            _0x3AB23B96 = 387,
            CPED_CONFIG_FLAG_IsClimbingLadder = 388,
            CPED_CONFIG_FLAG_HasBareFeet = 389,
            _0xB4B1CD4C = 390,
            _0x5459AFB8 = 391,
            _0x54F27667 = 392,
            _0xC11D3E8F = 393,
            _0x5419EB3E = 394,
            _0x82D8DBB4 = 395,
            _0x33B02D2F = 396,
            _0xAE66176D = 397,
            _0xA2692593 = 398,
            _0x714C7E31 = 399,
            _0xEC488AC7 = 400,
            _0xAE398504 = 401,
            _0xABC58D72 = 402,
            _0x5E5B9591 = 403,
            _0x6BA1091E = 404,
            _0x77840177 = 405,
            _0x1C7ACAC4 = 406,
            _0x124420E9 = 407,
            _0x75A65587 = 408,
            _0xDFD2D55B = 409,
            _0xBDD39919 = 410,
            _0x43DEC267 = 411,
            _0xE42B7797 = 412,
            CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,
            _0x4F8149F5 = 414,
            _0xDD9ECA7A = 415,
            _0x9E7EF9D2 = 416,
            _0x2C6ED942 = 417,
            CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,
            _0xA488727D = 419,
            _0xCFF5F6DE = 420,
            _0x6D614599 = 421,
            CPED_CONFIG_FLAG_DisableVehicleCombat = 422,
            _0xFE401D26 = 423,
            CPED_CONFIG_FLAG_FallsLikeAircraft = 424,
            _0x2B42AE82 = 425,
            _0x7A95734F = 426,
            _0xDF4D8617 = 427,
            _0x578F1F14 = 428,
            CPED_CONFIG_FLAG_DisableStartEngine = 429,
            CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,
            _0x153C9500 = 431,
            _0xCB7A632E = 432,
            _0xDE727981 = 433,
            CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,
            _0x12BBB935 = 435,
            _0xAD0A1277 = 436,
            _0xEA6AA46A = 437,
            CPED_CONFIG_FLAG_DisableHelmetArmor = 438,
            _0xCB7F3A1E = 439,
            _0x50178878 = 440,
            _0x051B4F0D = 441,
            _0x2FC3DECC = 442,
            _0xC0030B0B = 443,
            _0xBBDAF1E9 = 444,
            _0x944FE59C = 445,
            _0x506FBA39 = 446,
            _0xDD45FE84 = 447,
            _0xE698AE75 = 448,
            _0x199633F8 = 449,
            CPED_CONFIG_FLAG_PedIsArresting = 450,
            CPED_CONFIG_FLAG_IsDecoyPed = 451,
            _0x3A251D83 = 452,
            _0xA56F6986 = 453,
            _0x1D19C622 = 454,
            _0xB68D3EAB = 455,
            CPED_CONFIG_FLAG_CanBeIncapacitated = 456,
            _0x4BD5EBAD = 457,
            }
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedDefaultComponentVariation(System.Int32)">
            <summary>
            Sets Ped Default Clothes
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedEyeColor(System.Int32,System.Int32)">
            <summary>
            Used for freemode (online) characters.
            Indices:
            1.  black
            2.  very light blue/green
            3.  dark blue
            4.  brown
            5.  darker brown
            6.  light brown
            7.  blue
            8.  light blue
            9.  pink
            10. yellow
            11. purple
            12. black
            13. dark green
            14. light brown
            15. yellow/black pattern
            16. light colored spiral pattern
            17. shiny red
            18. shiny half blue/half red
            19. half black/half light blue
            20. white/red perimter
            21. green snake
            22. red snake
            23. dark blue snake
            24. dark yellow
            25. bright yellow
            26. all black
            27. red small pupil
            28. devil blue/black
            29. white small pupil
            30. glossed over
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedFaceFeature(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.
            Index can be 0 - 19
            SET_PED_M*
            Here is the list of names. It starts at 0 and runs in sequence
            Face_Feature
            Nose_Width
            Nose_Peak_Hight
            Nose_Peak_Lenght
            Nose_Bone_High
            Nose_Peak_Lowering
            Nose_Bone_Twist
            EyeBrown_High
            EyeBrown_Forward
            Cheeks_Bone_High
            Cheeks_Bone_Width
            Cheeks_Width
            Eyes_Openning
            Lips_Thickness
            Jaw_Bone_Width: Bone size to sides
            Jaw_Bone_Back_Lenght: Bone size to back
            Chimp_Bone_Lowering: Go Down
            Chimp_Bone_Lenght: Go forward
            Chimp_Bone_Width
            Chimp_Hole
            Neck_Thikness
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedHairColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Used for freemode (online) characters.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedHeadBlendData(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            The "shape" parameters control the shape of the ped's face. The "skin" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for "children" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.
            The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.
            !!!Can someone add working example for this???
            try this:
            headBlendData headData;
            _GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &amp;headData);
            SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond
            , headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);
            For more info please refer to this topic.
            gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedHeadOverlay(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.
            overlayID       Part                  Index, to disable
            0               Blemishes             0 - 23, 255
            1               Facial Hair           0 - 28, 255
            2               Eyebrows              0 - 33, 255
            3               Ageing                0 - 14, 255
            4               Makeup                0 - 74, 255
            5               Blush                 0 - 6, 255
            6               Complexion            0 - 11, 255
            7               Sun Damage            0 - 10, 255
            8               Lipstick              0 - 9, 255
            9               Moles/Freckles        0 - 17, 255
            10              Chest Hair            0 - 16, 255
            11              Body Blemishes        0 - 11, 255
            12              Add Body Blemishes    0 - 1, 255
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedHeadOverlayColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Used for freemode (online) characters.
            ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.
            Called after SET_PED_HEAD_OVERLAY().
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedPropIndex(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model.
            ### MP Freemode list of props
            **0**: Hat\
            **1**: Glass\
            **2**: Ear\
            **6**: Watch\
            **7**: Bracelet
            ### Related and useful natives
            [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\_0x5FAF9754E789FB47)\
            [GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\_0xA6E7F1CEB523E171)
            [List of component/props ID](gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html) of player_two with examples
            </summary>
            <param name="ped">
            The ped handle.
            </param>
            <param name="componentId">
            The component that you want to set.
            </param>
            <param name="drawableId">
            The drawable id that is going to be set.
            </param>
            <param name="textureId">
            The texture id of the drawable.
            </param>
            <param name="attach">
            Attached or not.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedRandomComponentVariation(System.Int32,System.Boolean)">
            <summary>
            p1 is always 0 in R* scripts; and a quick disassembly seems to indicate that p1 is unused.
            List of component/props ID:
            gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedRandomProps(System.Int32)">
            <summary>
            List of component/props ID
            gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedResetFlag(System.Int32,System.Int32,System.Boolean)">
            <summary>
            PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);
            Known values:
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedToRagdoll(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            p4/p5: Unusued in TU27
            ### Ragdoll Types
            **0**: CTaskNMRelax
            **1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
            **Else**: CTaskNMBalance
            </summary>
            <param name="time1">
            Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPedToRagdollWithFall(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Return variable is never used in R*'s scripts.
            Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.
            x, y, and z are coordinates, most likely to where the ped will fall.
            p7 is probably the force of the fall, but untested, so I left the variable name the same.
            p8 to p13 are always 0f in R*'s scripts.
            (Simplified) Example of the usage of the function from R*'s scripts:
            ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPlayerControl(System.String,System.Boolean,System.Int32)">
            <summary>
            Flags:
            SPC_AMBIENT_SCRIPT = (1 &lt;&lt; 1),
            SPC_CLEAR_TASKS = (1 &lt;&lt; 2),
            SPC_REMOVE_FIRES = (1 &lt;&lt; 3),
            SPC_REMOVE_EXPLOSIONS = (1 &lt;&lt; 4),
            SPC_REMOVE_PROJECTILES = (1 &lt;&lt; 5),
            SPC_DEACTIVATE_GADGETS = (1 &lt;&lt; 6),
            SPC_REENABLE_CONTROL_ON_DEATH = (1 &lt;&lt; 7),
            SPC_LEAVE_CAMERA_CONTROL_ON = (1 &lt;&lt; 8),
            SPC_ALLOW_PLAYER_DAMAGE = (1 &lt;&lt; 9),
            SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 &lt;&lt; 10),
            SPC_PREVENT_EVERYBODY_BACKOFF = (1 &lt;&lt; 11),
            SPC_ALLOW_PAD_SHAKE = (1 &lt;&lt; 12)
            See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPlayerCullingRadius(System.String,System.Single)">
            <summary>
            Sets the culling radius for the specified player.
            Set to `0.0` to reset.
            </summary>
            <param name="playerSrc">
            The player to set the culling radius for.
            </param>
            <param name="radius">
            The radius.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPlayerInvincible(System.String,System.Boolean)">
            <summary>
            Simply sets you as invincible (Health will not deplete).
            Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:
            *(DWORD *)(playerPedAddress + 0x188) |= (1 &lt;&lt; 9);
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPlayerModel(System.String,System.UInt32)">
            <summary>
            Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset
            Make sure to request the model first and wait until it has loaded.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPlayerRoutingBucket(System.String,System.Int32)">
            <summary>
            Sets the routing bucket for the specified player.
            Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
            </summary>
            <param name="playerSrc">
            The player to set the routing bucket for.
            </param>
            <param name="bucket">
            The bucket ID.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetPlayerWantedLevel(System.String,System.Int32,System.Boolean)">
            <summary>
            Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect
            wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files
            disableNoMission-  Disables When Off Mission- appears to always be false
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetResourceKvp(System.String,System.String)">
            <summary>
            A setter for [GET_RESOURCE_KVP_STRING](#\_0x5240DA5A).
            </summary>
            <param name="key">
            The key to set
            </param>
            <param name="_value">
            The value to write
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetResourceKvpFloat(System.String,System.Single)">
            <summary>
            A setter for [GET_RESOURCE_KVP_FLOAT](#\_0x35BDCEEA).
            </summary>
            <param name="key">
            The key to set
            </param>
            <param name="_value">
            The value to write
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetResourceKvpFloatNoSync(System.String,System.Single)">
            <summary>
            Nonsynchronous [SET_RESOURCE_KVP_FLOAT](#\_0x9ADD2938) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
            </summary>
            <param name="key">
            The key to set
            </param>
            <param name="_value">
            The value to write
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetResourceKvpInt(System.String,System.Int32)">
            <summary>
            A setter for [GET_RESOURCE_KVP_INT](#\_0x557B586A).
            </summary>
            <param name="key">
            The key to set
            </param>
            <param name="_value">
            The value to write
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetResourceKvpIntNoSync(System.String,System.Int32)">
            <summary>
            Nonsynchronous [SET_RESOURCE_KVP_INT](#\_0x6A2B1E8) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
            </summary>
            <param name="key">
            The key to set
            </param>
            <param name="_value">
            The value to write
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetResourceKvpNoSync(System.String,System.String)">
            <summary>
            Nonsynchronous [SET_RESOURCE_KVP](#\_0x21C7A35B) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
            </summary>
            <param name="key">
            The key to set
            </param>
            <param name="_value">
            The value to write
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetRoutingBucketEntityLockdownMode(System.Int32,System.String)">
            <summary>
            Sets the entity lockdown mode for a specific routing bucket.
            Lockdown modes are:
            | Mode       | Meaning                                                    |
            | ---------- | ---------------------------------------------------------- |
            | `strict`   | No entities can be created by clients at all.              |
            | `relaxed`  | Only script-owned entities created by clients are blocked. |
            | `inactive` | Clients can create any entity they want.                   |
            </summary>
            <param name="bucketId">
            The routing bucket ID to adjust.
            </param>
            <param name="mode">
            One of aforementioned modes.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetRoutingBucketPopulationEnabled(System.Int32,System.Boolean)">
            <summary>
            Sets whether or not the specified routing bucket has automatically-created population enabled.
            </summary>
            <param name="bucketId">
            The routing bucket ID to adjust.
            </param>
            <param name="mode">
            `true` to enable population, `false` to disable population.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetStateBagValue(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Internal function for setting a state bag value.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetVehicleBodyHealth(System.Int32,System.Single)">
            <summary>
            p2 often set to 1000.0 in the decompiled scripts.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetVehicleColourCombination(System.Int32,System.Int32)">
            <summary>
            Sets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter).
            Range of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)
            </summary>
            <param name="vehicle">
            The vehicle to modify.
            </param>
            <param name="colorCombination">
            One of the default color values of the vehicle.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetVehicleColours(System.Int32,System.Int32,System.Int32)">
            <summary>
            colorPrimary &amp; colorSecondary are the paint indexes for the vehicle.
            For a list of valid paint indexes, view: pastebin.com/pwHci0xK
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetVehicleCustomPrimaryColour(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetVehicleCustomSecondaryColour(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetVehicleDirtLevel(System.Int32,System.Single)">
            <summary>
            Sets the dirt level of the passed vehicle.
            </summary>
            <param name="vehicle">
            The vehicle to set.
            </param>
            <param name="dirtLevel">
            A number between 0.0 and 15.0 representing the vehicles dirt level.
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetVehicleDoorBroken(System.Int32,System.Int32,System.Boolean)">
            <summary>
            See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.SetVehicleDoorsLocked(System.Int32,System.Int32)">
            <summary>
            // Source GTA VC miss2 leak, matching constants for 0/2/4, testing
            // They use 10 in am_mp_property_int, don't know what it does atm.
            enum eCarLock {
            CARLOCK_NONE = 0,
            CARLOCK_UNLOCKED = 1,
            CARLOCK_LOCKED = 2,
            CARLOCK_LOCKOUT_PLAYER_ONLY = 3,
            CARLOCK_LOCKED_PLAYER_INSIDE = 4,
            CARLOCK_LOCKED_INITIALLY = 5,
            CARLOCK_FORCE_SHUT_DOORS = 6,
            CARLOCK_LOCKED_BUT_CAN_BE_DAMAGED = 7
            };
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TaskCombatPed(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes the specified ped attack the target ped.
            p2 should be 0
            p3 should be 16
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TaskDriveBy(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.UInt32)">
            <summary>
            Example:
            TASK::TASK_DRIVE_BY(l_467[1 -- [[22]] ], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});
            Needs working example. Doesn't seem to do anything.
            I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
            I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
            I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TaskEnterVehicle(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
            speed 1.0 = walk, 2.0 = run
            p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle
            p6 is always 0
            </summary>
            <param name="seatIndex">
            See eSeatPosition declared in [`IS_VEHICLE_SEAT_FREE`](#\_0x22AC59A870E6A669).
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TaskGoToCoordAnyMeans(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Int32,System.Single)">
            <summary>
            example from fm_mission_controller
            TASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TaskGoToEntity(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
            Note: I've only tested it on entity -&gt; ped and target -&gt; vehicle. It could work differently on other entities, didn't try it yet.
            Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)
            Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TaskHandsUp(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            In the scripts, p3 was always -1.
            p3 seems to be duration or timeout of turn animation.
            Also facingPed can be 0 or -1 so ped will just raise hands up.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TaskLeaveAnyVehicle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Flags are the same flags used in [`TASK_LEAVE_VEHICLE`](#\_0xD3DBCE61A490BE02)
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TaskLeaveVehicle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Flags from decompiled scripts:
            0 = normal exit and closes door.
            1 = normal exit and closes door.
            16 = teleports outside, door kept closed.
            64 = normal exit and closes door, maybe a bit slower animation than 0.
            256 = normal exit but does not close the door.
            4160 = ped is throwing himself out, even when the vehicle is still.
            262144 = ped moves to passenger seat first, then exits normally
            Others to be tried out: 320, 512, 131072.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TaskPlayAnim(System.Int32,System.String,System.String,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            [Animations list](https://alexguirre.github.io/animations-list/)
            ```
            float blendInSpeed &gt; normal speed is 8.0f
            ----------------------
            float blendOutSpeed &gt; normal speed is 8.0f
            ----------------------
            int duration: time in millisecond
            ----------------------
            -1 _ _ _ _ _ _ _&gt; Default (see flag)
            0 _ _ _ _ _ _ _ &gt; Not play at all
            Small value _ _ &gt; Slow down animation speed
            Other _ _ _ _ _ &gt; freeze player control until specific time (ms) has
            _ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be
            _ _ _ _ _ _ _ _ _ controllable.)
            int flag:
            ----------------------
            enum eAnimationFlags
            {
            ANIM_FLAG_NORMAL = 0,
            ANIM_FLAG_REPEAT = 1,
            ANIM_FLAG_STOP_LAST_FRAME = 2,
            ANIM_FLAG_UPPERBODY = 16,
            ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,
            ANIM_FLAG_CANCELABLE = 120,
            };
            Odd number : loop infinitely
            Even number : Freeze at last frame
            Multiple of 4: Freeze at last frame but controllable
            01 to 15 &gt; Full body
            10 to 31 &gt; Upper body
            32 to 47 &gt; Full body &gt; Controllable
            48 to 63 &gt; Upper body &gt; Controllable
            ...
            001 to 255 &gt; Normal
            256 to 511 &gt; Garbled
            ...
            playbackRate:
            values are between 0.0 and 1.0
            lockX:
            0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3
            &gt; 1 for mini@sprunk
            lockY:
            0 in most cases
            1 for missfam5_yoga, missfra1mcs_2_crew_react
            lockZ:
            0 for single player
            Can be 1 but only for MP
            ```
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TaskPlayAnimAdvanced(System.Int32,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
            It's similar to the one above, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).
            [Animations list](https://alexguirre.github.io/animations-list/)
            </summary>
            <param name="ped">
            The target ped
            </param>
            <param name="animDict">
            Name of the animation dictionary
            </param>
            <param name="animName">
            Name of the animation
            </param>
            <param name="posX">
            Initial X position of the task
            </param>
            <param name="posY">
            Initial Y position of the task
            </param>
            <param name="posZ">
            Initial Z position of the task
            </param>
            <param name="rotX">
            Initial X rotation of the task, doesn't seem to have any effect
            </param>
            <param name="rotY">
            Initial Y rotation of the task, doesn't seem to have any effect
            </param>
            <param name="rotZ">
            Initial Z rotation of the task
            </param>
            <param name="animEnterSpeed">
            Adjust character speed to fully enter animation
            </param>
            <param name="animExitSpeed">
            Adjust character speed to fully exit animation (useless `ClearPedTasksImmediately()` is called)
            </param>
            <param name="duration">
            Time in milliseconds
            </param>
            <param name="animTime">
            Value between 0.0 and 1.0, lets you start an animation from the given point
            </param>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TaskShootAtCoord(System.Int32,System.Single,System.Single,System.Single,System.Int32,System.UInt32)">
            <summary>
            Firing Pattern Hash Information: https://pastebin.com/Px036isB
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TaskShootAtEntity(System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
            Entity aimedentity;
            Player player = PLAYER::PLAYER_ID();
            PLAYER::_GET_AIMED_ENTITY(player, &amp;aimedentity);
            //bg is an array of peds
            TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));
            in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.
            Firing Pattern Hash Information: https://pastebin.com/Px036isB
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TriggerClientEventInternal(System.String,System.String,System.String,System.Int32)">
            <summary>
            The backing function for TriggerClientEvent.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TriggerEventInternal(System.String,System.String,System.Int32)">
            <summary>
            The backing function for TriggerEvent.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.TriggerLatentClientEventInternal(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            The backing function for TriggerLatentClientEvent.
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Native.API.WasEventCanceled">
            <summary>
            Returns whether or not the currently executing event was canceled.
            </summary>
            <returns>
            A boolean.
            </returns>
        </member>
        <member name="P:CitizenFX.Core.Entity.Position">
            <summary>
            Gets or sets the position of this <see cref="T:CitizenFX.Core.Entity"/>.
            </summary>
            <value>
            The position in world space.
            </value>
        </member>
        <member name="P:CitizenFX.Core.Entity.Rotation">
            <summary>
            Gets or sets the rotation of this <see cref="T:CitizenFX.Core.Entity"/>.
            </summary>
            <value>
            The yaw, pitch, roll rotation values.
            </value>
        </member>
        <member name="P:CitizenFX.Core.Entity.Heading">
            <summary>
            Gets or sets the heading of this <see cref="T:CitizenFX.Core.Entity"/>.
            </summary>
            <value>
            The heading in degrees.
            </value>
        </member>
        <member name="P:CitizenFX.Core.Entity.IsPositionFrozen">
            <summary>
            Sets a value indicating whether this <see cref="T:CitizenFX.Core.Entity"/> should be frozen.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:CitizenFX.Core.Entity"/> position should be frozen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CitizenFX.Core.Entity.Velocity">
            <summary>
            Gets or sets the velocity of this <see cref="T:CitizenFX.Core.Entity"/>.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Entity.RotationVelocity">
            <summary>
            Gets the rotation velocity of this <see cref="T:CitizenFX.Core.Entity"/>.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Entity.Model">
            <summary>
            Gets the model of the this <see cref="T:CitizenFX.Core.Entity"/>.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Entity.Owner">
            <summary>
            Gets the network owner of the this <see cref="T:CitizenFX.Core.Entity"/>.
            </summary>
            <returns>Returns the <see cref="T:CitizenFX.Core.Player"/> of the network owner.
            Returns <c>null</c> if this <see cref="T:CitizenFX.Core.Entity"/> is in an unowned state.</returns>
        </member>
        <member name="P:CitizenFX.Core.Entity.NetworkId">
            <summary>
            Gets the network ID of the this <see cref="T:CitizenFX.Core.Entity"/>.
            </summary>
        </member>
        <member name="P:CitizenFX.Core.Entity.Type">
            <summary>
            Gets the type of this <see cref="T:CitizenFX.Core.Entity"/>.
            </summary>
            <returns>Returns 1 if this <see cref="T:CitizenFX.Core.Entity"/> is a Ped.
            Returns 2 if this <see cref="T:CitizenFX.Core.Entity"/> is a Vehicle.
            Returns 3 if this <see cref="T:CitizenFX.Core.Entity"/> is a Prop.</returns>
        </member>
        <member name="P:CitizenFX.Core.Entity.State">
            <summary>
            Gets the <see cref="T:CitizenFX.Core.StateBag"/> of this <see cref="T:CitizenFX.Core.Entity"/>
            </summary>
        </member>
        <member name="M:CitizenFX.Core.Entity.FromHandle(System.Int32)">
            <summary>
            Creates a new instance of an <see cref="T:CitizenFX.Core.Entity"/> from the given handle.
            </summary>
            <param name="handle">The entity handle.</param>
            <returns>Returns a <see cref="T:CitizenFX.Core.Ped"/> if this handle corresponds to a Ped.
            Returns a <see cref="T:CitizenFX.Core.Vehicle"/> if this handle corresponds to a Vehicle.
            Returns a <see cref="T:CitizenFX.Core.Prop"/> if this handle corresponds to a Prop.
            Returns <c>null</c> if no <see cref="T:CitizenFX.Core.Entity"/> exists this the specified <paramref name="handle"/></returns>
        </member>
        <member name="M:CitizenFX.Core.Entity.FromNetworkId(System.Int32)">
            <summary>
            Creates a new instance of an <see cref="T:CitizenFX.Core.Entity"/> from the given network ID.
            </summary>
            <param name="networkId">The entity network ID.</param>
            <returns>Returns a <see cref="T:CitizenFX.Core.Ped"/> if this network ID corresponds to a Ped.
            Returns a <see cref="T:CitizenFX.Core.Vehicle"/> if this network ID corresponds to a Vehicle.
            Returns a <see cref="T:CitizenFX.Core.Prop"/> if this network ID corresponds to a Prop.
            Returns <c>null</c> if no <see cref="T:CitizenFX.Core.Entity"/> exists this the specified <paramref name="networkId"/></returns>
        </member>
        <member name="M:CitizenFX.Core.Entity.Equals(CitizenFX.Core.Entity)">
            <summary>
            Checks if two <see cref="T:CitizenFX.Core.Entity"/>s refer to the same <see cref="T:CitizenFX.Core.Entity"/>
            </summary>
            <param name="entity">The other <see cref="T:CitizenFX.Core.Entity"/>.</param>
            <returns><c>true</c> if they are the same <see cref="T:CitizenFX.Core.Entity"/>; otherwise, false</returns>
        </member>
        <member name="M:CitizenFX.Core.Ped.FromPlayerHandle(System.String)">
            <summary>
            Creates a new instance of an <see cref="T:CitizenFX.Core.Ped"/> from the given player handle.
            </summary>
            <param name="handle">The players handle.</param>
            <returns>Returns the <see cref="T:CitizenFX.Core.Ped"/> of the player.
            Returns <c>null</c> if no <see cref="T:CitizenFX.Core.Ped"/> exists for the specified player</returns>
        </member>
        <member name="M:CitizenFX.Core.Player.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CitizenFX.Core.Player.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:CitizenFX.Core.IdentifierCollection.Item(System.String)">
            <summary>
            Gets the identifier value of a particular type.
            </summary>
            <example>
            string steamId = player.Identifiers["steam"];
            </example>
            <param name="type">The identifier type to return.</param>
            <returns>The identifier value (without prefix), or null if it could not be found.</returns>
        </member>
        <member name="F:System.Drawing.Color.Empty">
             <summary>
            	Empty Shared Field
             </summary>
            
             <remarks>
            	An uninitialized Color Structure
             </remarks>
        </member>
        <member name="M:System.Drawing.Color.op_Equality(System.Drawing.Color,System.Drawing.Color)">
             <summary>
            	Equality Operator
             </summary>
            
             <remarks>
            	Compares two Color objects. The return value is
            	based on the equivalence of the A,R,G,B properties 
            	of the two Colors.
             </remarks>
        </member>
        <member name="M:System.Drawing.Color.op_Inequality(System.Drawing.Color,System.Drawing.Color)">
             <summary>
            	Inequality Operator
             </summary>
            
             <remarks>
            	Compares two Color objects. The return value is
            	based on the equivalence of the A,R,G,B properties 
            	of the two colors.
             </remarks>
        </member>
        <member name="P:System.Drawing.Color.IsEmpty">
             <summary>
            	IsEmpty Property
             </summary>
            
             <remarks>
            	Indicates transparent black. R,G,B = 0; A=0?
             </remarks>
        </member>
        <member name="M:System.Drawing.Color.Equals(System.Object)">
             <summary>
            	Equals Method
             </summary>
            
             <remarks>
            	Checks equivalence of this Color and another object.
             </remarks>
        </member>
        <member name="M:System.Drawing.Color.GetHashCode">
             <summary>
            	GetHashCode Method
             </summary>
            
             <remarks>
            	Calculates a hashing value.
             </remarks>
        </member>
        <member name="M:System.Drawing.Color.ToString">
             <summary>
            	ToString Method
             </summary>
            
             <remarks>
            	Formats the Color as a string in ARGB notation.
             </remarks>
        </member>
        <member name="F:System.Drawing.Point.Empty">
             <summary>
            	Empty Shared Field
             </summary>
            
             <remarks>
            	An uninitialized Point Structure.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.Ceiling(System.Drawing.PointF)">
             <summary>
            	Ceiling Shared Method
             </summary>
            
             <remarks>
            	Produces a Point structure from a PointF structure by
            	taking the ceiling of the X and Y properties.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.Round(System.Drawing.PointF)">
             <summary>
            	Round Shared Method
             </summary>
            
             <remarks>
            	Produces a Point structure from a PointF structure by
            	rounding the X and Y properties.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.Truncate(System.Drawing.PointF)">
             <summary>
            	Truncate Shared Method
             </summary>
            
             <remarks>
            	Produces a Point structure from a PointF structure by
            	truncating the X and Y properties.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.op_Addition(System.Drawing.Point,System.Drawing.Size)">
             <summary>
            	Addition Operator
             </summary>
            
             <remarks>
            	Translates a Point using the Width and Height
            	properties of the given <typeref>Size</typeref>.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.op_Equality(System.Drawing.Point,System.Drawing.Point)">
             <summary>
            	Equality Operator
             </summary>
            
             <remarks>
            	Compares two Point objects. The return value is
            	based on the equivalence of the X and Y properties 
            	of the two points.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.op_Inequality(System.Drawing.Point,System.Drawing.Point)">
             <summary>
            	Inequality Operator
             </summary>
            
             <remarks>
            	Compares two Point objects. The return value is
            	based on the equivalence of the X and Y properties 
            	of the two points.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.op_Subtraction(System.Drawing.Point,System.Drawing.Size)">
             <summary>
            	Subtraction Operator
             </summary>
            
             <remarks>
            	Translates a Point using the negation of the Width 
            	and Height properties of the given Size.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.op_Explicit(System.Drawing.Point)~System.Drawing.Size">
             <summary>
            	Point to Size Conversion
             </summary>
            
             <remarks>
            	Returns a Size based on the Coordinates of a given 
            	Point. Requires explicit cast.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.op_Implicit(System.Drawing.Point)~System.Drawing.PointF">
             <summary>
            	Point to PointF Conversion
             </summary>
            
             <remarks>
            	Creates a PointF based on the coordinates of a given 
            	Point. No explicit cast is required.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.#ctor(System.Int32)">
             <summary>
            	Point Constructor
             </summary>
            
             <remarks>
            	Creates a Point from an integer which holds the Y
            	coordinate in the high order 16 bits and the X
            	coordinate in the low order 16 bits.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.#ctor(System.Drawing.Size)">
             <summary>
            	Point Constructor
             </summary>
            
             <remarks>
            	Creates a Point from a Size value.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.#ctor(System.Int32,System.Int32)">
             <summary>
            	Point Constructor
             </summary>
            
             <remarks>
            	Creates a Point from a specified x,y coordinate pair.
             </remarks>
        </member>
        <member name="P:System.Drawing.Point.IsEmpty">
             <summary>
            	IsEmpty Property
             </summary>
            
             <remarks>
            	Indicates if both X and Y are zero.
             </remarks>
        </member>
        <member name="P:System.Drawing.Point.X">
             <summary>
            	X Property
             </summary>
            
             <remarks>
            	The X coordinate of the Point.
             </remarks>
        </member>
        <member name="P:System.Drawing.Point.Y">
             <summary>
            	Y Property
             </summary>
            
             <remarks>
            	The Y coordinate of the Point.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.Equals(System.Object)">
             <summary>
            	Equals Method
             </summary>
            
             <remarks>
            	Checks equivalence of this Point and another object.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.GetHashCode">
             <summary>
            	GetHashCode Method
             </summary>
            
             <remarks>
            	Calculates a hashing value.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.Offset(System.Int32,System.Int32)">
             <summary>
            	Offset Method
             </summary>
            
             <remarks>
            	Moves the Point a specified distance.
             </remarks>
        </member>
        <member name="M:System.Drawing.Point.ToString">
             <summary>
            	ToString Method
             </summary>
            
             <remarks>
            	Formats the Point as a string in coordinate notation.
             </remarks>
        </member>
        <member name="F:System.Drawing.PointF.Empty">
             <summary>
            	Empty Shared Field
             </summary>
            
             <remarks>
            	An uninitialized PointF Structure.
             </remarks>
        </member>
        <member name="M:System.Drawing.PointF.op_Addition(System.Drawing.PointF,System.Drawing.Size)">
             <summary>
            	Addition Operator
             </summary>
            
             <remarks>
            	Translates a PointF using the Width and Height
            	properties of the given Size.
             </remarks>
        </member>
        <member name="M:System.Drawing.PointF.op_Equality(System.Drawing.PointF,System.Drawing.PointF)">
             <summary>
            	Equality Operator
             </summary>
            
             <remarks>
            	Compares two PointF objects. The return value is
            	based on the equivalence of the X and Y properties 
            	of the two points.
             </remarks>
        </member>
        <member name="M:System.Drawing.PointF.op_Inequality(System.Drawing.PointF,System.Drawing.PointF)">
             <summary>
            	Inequality Operator
             </summary>
            
             <remarks>
            	Compares two PointF objects. The return value is
            	based on the equivalence of the X and Y properties 
            	of the two points.
             </remarks>
        </member>
        <member name="M:System.Drawing.PointF.op_Subtraction(System.Drawing.PointF,System.Drawing.Size)">
             <summary>
            	Subtraction Operator
             </summary>
            
             <remarks>
            	Translates a PointF using the negation of the Width 
            	and Height properties of the given Size.
             </remarks>
        </member>
        <member name="M:System.Drawing.PointF.#ctor(System.Single,System.Single)">
             <summary>
            	PointF Constructor
             </summary>
            
             <remarks>
            	Creates a PointF from a specified x,y coordinate pair.
             </remarks>
        </member>
        <member name="P:System.Drawing.PointF.IsEmpty">
             <summary>
            	IsEmpty Property
             </summary>
            
             <remarks>
            	Indicates if both X and Y are zero.
             </remarks>
        </member>
        <member name="P:System.Drawing.PointF.X">
             <summary>
            	X Property
             </summary>
            
             <remarks>
            	The X coordinate of the PointF.
             </remarks>
        </member>
        <member name="P:System.Drawing.PointF.Y">
             <summary>
            	Y Property
             </summary>
            
             <remarks>
            	The Y coordinate of the PointF.
             </remarks>
        </member>
        <member name="M:System.Drawing.PointF.Equals(System.Object)">
             <summary>
            	Equals Method
             </summary>
            
             <remarks>
            	Checks equivalence of this PointF and another object.
             </remarks>
        </member>
        <member name="M:System.Drawing.PointF.GetHashCode">
             <summary>
            	GetHashCode Method
             </summary>
            
             <remarks>
            	Calculates a hashing value.
             </remarks>
        </member>
        <member name="M:System.Drawing.PointF.ToString">
             <summary>
            	ToString Method
             </summary>
            
             <remarks>
            	Formats the PointF as a string in coordinate notation.
             </remarks>
        </member>
        <member name="F:System.Drawing.Size.Empty">
             <summary>
            	Empty Shared Field
             </summary>
            
             <remarks>
            	An uninitialized Size Structure.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.Ceiling(System.Drawing.SizeF)">
             <summary>
            	Ceiling Shared Method
             </summary>
            
             <remarks>
            	Produces a Size structure from a SizeF structure by
            	taking the ceiling of the Width and Height properties.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.Round(System.Drawing.SizeF)">
             <summary>
            	Round Shared Method
             </summary>
            
             <remarks>
            	Produces a Size structure from a SizeF structure by
            	rounding the Width and Height properties.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.Truncate(System.Drawing.SizeF)">
             <summary>
            	Truncate Shared Method
             </summary>
            
             <remarks>
            	Produces a Size structure from a SizeF structure by
            	truncating the Width and Height properties.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.op_Addition(System.Drawing.Size,System.Drawing.Size)">
             <summary>
            	Addition Operator
             </summary>
            
             <remarks>
            	Addition of two Size structures.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.op_Equality(System.Drawing.Size,System.Drawing.Size)">
             <summary>
            	Equality Operator
             </summary>
            
             <remarks>
            	Compares two Size objects. The return value is
            	based on the equivalence of the Width and Height 
            	properties of the two Sizes.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.op_Inequality(System.Drawing.Size,System.Drawing.Size)">
             <summary>
            	Inequality Operator
             </summary>
            
             <remarks>
            	Compares two Size objects. The return value is
            	based on the equivalence of the Width and Height 
            	properties of the two Sizes.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.op_Subtraction(System.Drawing.Size,System.Drawing.Size)">
             <summary>
            	Subtraction Operator
             </summary>
            
             <remarks>
            	Subtracts two Size structures.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.op_Explicit(System.Drawing.Size)~System.Drawing.Point">
             <summary>
            	Size to Point Conversion
             </summary>
            
             <remarks>
            	Returns a Point based on the dimensions of a given 
            	Size. Requires explicit cast.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.op_Implicit(System.Drawing.Size)~System.Drawing.SizeF">
             <summary>
            	Size to SizeF Conversion
             </summary>
            
             <remarks>
            	Creates a SizeF based on the dimensions of a given 
            	Size. No explicit cast is required.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.#ctor(System.Drawing.Point)">
             <summary>
            	Size Constructor
             </summary>
            
             <remarks>
            	Creates a Size from a Point value.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.#ctor(System.Int32,System.Int32)">
             <summary>
            	Size Constructor
             </summary>
            
             <remarks>
            	Creates a Size from specified dimensions.
             </remarks>
        </member>
        <member name="P:System.Drawing.Size.IsEmpty">
             <summary>
            	IsEmpty Property
             </summary>
            
             <remarks>
            	Indicates if both Width and Height are zero.
             </remarks>
        </member>
        <member name="P:System.Drawing.Size.Width">
             <summary>
            	Width Property
             </summary>
            
             <remarks>
            	The Width coordinate of the Size.
             </remarks>
        </member>
        <member name="P:System.Drawing.Size.Height">
             <summary>
            	Height Property
             </summary>
            
             <remarks>
            	The Height coordinate of the Size.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.Equals(System.Object)">
             <summary>
            	Equals Method
             </summary>
            
             <remarks>
            	Checks equivalence of this Size and another object.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.GetHashCode">
             <summary>
            	GetHashCode Method
             </summary>
            
             <remarks>
            	Calculates a hashing value.
             </remarks>
        </member>
        <member name="M:System.Drawing.Size.ToString">
             <summary>
            	ToString Method
             </summary>
            
             <remarks>
            	Formats the Size as a string in coordinate notation.
             </remarks>
        </member>
        <member name="F:System.Drawing.SizeF.Empty">
             <summary>
            	Empty Shared Field
             </summary>
            
             <remarks>
            	An uninitialized SizeF Structure.
             </remarks>
        </member>
        <member name="M:System.Drawing.SizeF.op_Addition(System.Drawing.SizeF,System.Drawing.SizeF)">
             <summary>
            	Addition Operator
             </summary>
            
             <remarks>
            	Addition of two SizeF structures.
             </remarks>
        </member>
        <member name="M:System.Drawing.SizeF.op_Equality(System.Drawing.SizeF,System.Drawing.SizeF)">
             <summary>
            	Equality Operator
             </summary>
            
             <remarks>
            	Compares two SizeF objects. The return value is
            	based on the equivalence of the Width and Height 
            	properties of the two Sizes.
             </remarks>
        </member>
        <member name="M:System.Drawing.SizeF.op_Inequality(System.Drawing.SizeF,System.Drawing.SizeF)">
             <summary>
            	Inequality Operator
             </summary>
            
             <remarks>
            	Compares two SizeF objects. The return value is
            	based on the equivalence of the Width and Height 
            	properties of the two Sizes.
             </remarks>
        </member>
        <member name="M:System.Drawing.SizeF.op_Subtraction(System.Drawing.SizeF,System.Drawing.SizeF)">
             <summary>
            	Subtraction Operator
             </summary>
            
             <remarks>
            	Subtracts two SizeF structures.
             </remarks>
        </member>
        <member name="M:System.Drawing.SizeF.op_Explicit(System.Drawing.SizeF)~System.Drawing.PointF">
             <summary>
            	SizeF to PointF Conversion
             </summary>
            
             <remarks>
            	Returns a PointF based on the dimensions of a given 
            	SizeF. Requires explicit cast.
             </remarks>
        </member>
        <member name="M:System.Drawing.SizeF.#ctor(System.Drawing.PointF)">
             <summary>
            	SizeF Constructor
             </summary>
            
             <remarks>
            	Creates a SizeF from a PointF value.
             </remarks>
        </member>
        <member name="M:System.Drawing.SizeF.#ctor(System.Drawing.SizeF)">
             <summary>
            	SizeF Constructor
             </summary>
            
             <remarks>
            	Creates a SizeF from an existing SizeF value.
             </remarks>
        </member>
        <member name="M:System.Drawing.SizeF.#ctor(System.Single,System.Single)">
             <summary>
            	SizeF Constructor
             </summary>
            
             <remarks>
            	Creates a SizeF from specified dimensions.
             </remarks>
        </member>
        <member name="P:System.Drawing.SizeF.IsEmpty">
             <summary>
            	IsEmpty Property
             </summary>
            
             <remarks>
            	Indicates if both Width and Height are zero.
             </remarks>
        </member>
        <member name="P:System.Drawing.SizeF.Width">
             <summary>
            	Width Property
             </summary>
            
             <remarks>
            	The Width coordinate of the SizeF.
             </remarks>
        </member>
        <member name="P:System.Drawing.SizeF.Height">
             <summary>
            	Height Property
             </summary>
            
             <remarks>
            	The Height coordinate of the SizeF.
             </remarks>
        </member>
        <member name="M:System.Drawing.SizeF.Equals(System.Object)">
             <summary>
            	Equals Method
             </summary>
            
             <remarks>
            	Checks equivalence of this SizeF and another object.
             </remarks>
        </member>
        <member name="M:System.Drawing.SizeF.GetHashCode">
             <summary>
            	GetHashCode Method
             </summary>
            
             <remarks>
            	Calculates a hashing value.
             </remarks>
        </member>
        <member name="M:System.Drawing.SizeF.ToString">
             <summary>
            	ToString Method
             </summary>
            
             <remarks>
            	Formats the SizeF as a string in coordinate notation.
             </remarks>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.GetFileColumnNumber">
            <summary>
                 Gets the column number in the file that contains the code that is executing. 
                 This information is typically extracted from the debugging symbols for the executable.
            </summary>
            <returns>The file column number, or 0 (zero) if the file column number cannot be determined.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.GetFileLineNumber">
            <summary>
                Gets the line number in the file that contains the code that is executing. 
                This information is typically extracted from the debugging symbols for the executable.
            </summary>
            <returns>The file line number, or 0 (zero) if the file line number cannot be determined.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.GetFileName">
            <summary>
                Gets the file name that contains the code that is executing. 
                This information is typically extracted from the debugging symbols for the executable.
            </summary>
            <returns>The file name, or null if the file name cannot be determined.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.GetILOffset">
            <summary>
               Gets the offset from the start of the Microsoft intermediate language (MSIL)
               code for the method that is executing. This offset might be an approximation
               depending on whether or not the just-in-time (JIT) compiler is generating debugging
               code. The generation of this debugging information is controlled by the System.Diagnostics.DebuggableAttribute.
            </summary>
            <returns>The offset from the start of the MSIL code for the method that is executing.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.GetMethod">
            <summary>
                Gets the method in which the frame is executing.
            </summary>
            <returns>The method in which the frame is executing.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.GetNativeOffset">
            <summary>
                Gets the offset from the start of the native just-in-time (JIT)-compiled code
                for the method that is being executed. The generation of this debugging information
                is controlled by the System.Diagnostics.DebuggableAttribute class.
            </summary>
            <returns>The offset from the start of the JIT-compiled code for the method that is being executed.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.ToString">
            <summary>
                Builds a readable representation of the stack trace.
            </summary>
            <returns>A readable representation of the stack trace.</returns>
        </member>
        <member name="P:System.Diagnostics.EnhancedStackTrace.FrameCount">
            <summary>
            Gets the number of frames in the stack trace.
            </summary>
            <returns>The number of frames in the stack trace.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackTrace.GetFrame(System.Int32)">
            <summary>
            Gets the specified stack frame.
            </summary>
            <param name="index">The index of the stack frame requested.</param>
            <returns>The specified stack frame.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackTrace.GetFrames">
            <summary>
                Returns a copy of all stack frames in the current stack trace.
            </summary>
            <returns>
                An array of type System.Diagnostics.StackFrame representing the function calls
                in the stack trace.
            </returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackTrace.ToString">
            <summary>
            Builds a readable representation of the stack trace.
            </summary>
            <returns>A readable representation of the stack trace.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackTrace.TryGetFullPath(System.String)">
            <summary>
            Tries to convert a given <paramref name="filePath"/> to a full path.
            Returns original value if the conversion isn't possible or a given path is relative.
            </summary>
        </member>
        <member name="T:System.Diagnostics.ExceptionExtentions">
            <nodoc />
        </member>
        <member name="M:System.Diagnostics.ExceptionExtentions.Demystify``1(``0)">
            <summary>
            Demystifies the given <paramref name="exception"/> and tracks the original stack traces for the whole exception tree.
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExceptionExtentions.ToStringDemystified(System.Exception)">
            <summary>
            Gets demystified string representation of the <paramref name="exception"/>.
            </summary>
            <remarks>
            <see cref="M:System.Diagnostics.ExceptionExtentions.Demystify``1(``0)"/> method mutates the exception instance that can cause
            issues if a system relies on the stack trace be in the specific form.
            Unlike <see cref="M:System.Diagnostics.ExceptionExtentions.Demystify``1(``0)"/> this method is pure. It calls <see cref="M:System.Diagnostics.ExceptionExtentions.Demystify``1(``0)"/> first,
            computes a demystified string representation and then restores the original state of the exception back.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.Internal.ReflectionHelper">
            <summary>
            A helper class that contains utilities methods for dealing with reflection.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Internal.ReflectionHelper.IsReadOnlyAttribute(System.Type)">
            <summary>
            Returns true if <paramref name="type"/> is <code>System.Runtime.CompilerServices.IsReadOnlyAttribute</code>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Internal.ReflectionHelper.IsValueTuple(System.Type)">
            <summary>
            Returns true if the <paramref name="type"/> is a value tuple type.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Internal.ReflectionHelper.IsTupleElementNameAttribue(System.Attribute)">
            <summary>
            Returns true if the given <paramref name="attribute"/> is of type <code>TupleElementNameAttribute</code>.
            </summary>
            <remarks>
            To avoid compile-time depencency hell with System.ValueTuple, this method uses reflection and not checks statically that 
            the given <paramref name="attribute"/> is <code>TupleElementNameAttribute</code>.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Internal.ReflectionHelper.GetTransformerNames(System.Attribute)">
            <summary>
            Returns 'TransformNames' property value from a given <paramref name="attribute"/>.
            </summary>
            <remarks>
            To avoid compile-time depencency hell with System.ValueTuple, this method uses reflection 
            instead of casting the attribute to a specific type.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.TypeNameHelper.GetTypeDisplayName(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Pretty print a type name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="fullName"><c>true</c> to print a fully qualified name.</param>
            <param name="includeGenericParameterNames"><c>true</c> to include generic parameter names.</param>
            <returns>The pretty printed type name.</returns>
        </member>
        <member name="M:System.Diagnostics.TypeNameHelper.GetTypeNameForGenericType(System.Type)">
            <summary>
            Returns a name of given generic type without '`'.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Enumerable.EnumerableIList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:System.Collections.Generic.Enumerable.EnumerableIList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:System.Collections.Generic.Enumerable.EnumerableIList`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
    </members>
</doc>
